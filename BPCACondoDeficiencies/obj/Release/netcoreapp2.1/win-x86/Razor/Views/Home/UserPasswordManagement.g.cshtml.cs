#pragma checksum "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\Home\UserPasswordManagement.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1dbd435ca2b751d51f804d10d36fded4e50d59b5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_UserPasswordManagement), @"mvc.1.0.view", @"/Views/Home/UserPasswordManagement.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/UserPasswordManagement.cshtml", typeof(AspNetCore.Views_Home_UserPasswordManagement))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#line 2 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1dbd435ca2b751d51f804d10d36fded4e50d59b5", @"/Views/Home/UserPasswordManagement.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b8fbd9faa897a3de153447734863bc8f11e1a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_UserPasswordManagement : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\Home\UserPasswordManagement.cshtml"
  
    ViewData["Title"] = "User Password Management";

#line default
#line hidden
            BeginContext(60, 5305, true);
            WriteLiteral(@"
<script type=""text/javascript"">
    var creditTypes;
    var invoiceComponents;
    var invoiceApproved;
    var alertMessage = """";
    var invoiceGuid = '00000000-0000-0000-0000-000000000000';
    var pwdRegex = new RegExp(""^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!#\$%\^&\*])(?=.{8,})"");
    var lowerRegex = new RegExp(""^(?=.*[a-z])"");
    var upperRegex = new RegExp(""^(?=.*[A-Z])"");
    var numberRegex = new RegExp(""^(?=.*[0-9])"");
    var specialRegex = new RegExp(""^(?=.*[!#\$%\^&\*])"");
    var lengthRegex = new RegExp(""(?=.{8,})"");

    $(document).ready
        (
    function () {
        $('#rules').hide();
        $('#mainMenu').hide();
        $(""#textUserName"").igTextEditor({
            width: ""270px"",
            required: true,
            nullText: ""Please specify your user name..."",
            textMode: ""text""
        });
        $(""#textOldPassword"").igTextEditor({
            width: ""270px"",
            required: true,
            nullText: ""Please specify the ol");
            WriteLiteral(@"d password..."",
            textMode: ""password""
        });
        $(""#textNewPassword"").igTextEditor({
            width: ""270px"",
            required: true,
            nullText: ""Please specify a new password..."",
            textMode: ""password"",
            textChanged: function (evt, ui) {
                validatePassword(ui.text);
            }
        });
        $(""#textConfirmPassword"").igTextEditor({
            width: ""270px"",
            required: true,
            nullText: ""Please confirm the new password..."",
            textMode: ""password""
        });
    });

    function validatePassword(pwd) {
        var td;
        var ret = true;
        $('#rules').show();

        if (!lowerRegex.test(pwd)) {
            td = document.getElementById(""lowerTd"");
            td.style.color = ""red"";
            ret = false;
        }
        else {
            td = document.getElementById(""lowerTd"");
            td.style.color = ""green"";
        }

        if (!uppe");
            WriteLiteral(@"rRegex.test(pwd)) {
            td = document.getElementById(""upperTd"");
            td.style.color = ""red"";
            ret = false;
        }
        else {
            td = document.getElementById(""upperTd"");
            td.style.color = ""green"";
        }

        if (!numberRegex.test(pwd)) {
            td = document.getElementById(""numberTd"");
            td.style.color = ""red"";
            ret = false;
        }
        else {
            td = document.getElementById(""numberTd"");
            td.style.color = ""green"";
        }

        if (!specialRegex.test(pwd)) {
            td = document.getElementById(""specialTd"");
            td.style.color = ""red"";
            ret = false;
        }
        else {
            td = document.getElementById(""specialTd"");
            td.style.color = ""green"";
        }

        if (!lengthRegex.test(pwd)) {
            td = document.getElementById(""lengthTd"");
            td.style.color = ""red"";
            ret = false;
        }
");
            WriteLiteral(@"        else {
            td = document.getElementById(""lengthTd"");
            td.style.color = ""green"";
        }

        return ret;
    }

    function validateComplete(pwd) {
        if (!pwdRegex.test(pwd)) {
            return false;
        }
        else {
            return true;
        }
    }

    function savePassword() {
        var newPwd = $(""#textNewPassword"").igTextEditor(""option"", ""value"");
        var oPwd = $(""#textOldPassword"").igTextEditor(""option"", ""value"");
        var uid = $(""#textUserName"").igTextEditor(""option"", ""value"");

        if (!validateComplete(newPwd)) {
            document.getElementById('errorMessageText').innerHTML = 'New password does not meet the complexity requirements!';
            showErrorAlert('Invalid Password!');
            return;
        }
        var confirmPwd = $(""#textConfirmPassword"").igTextEditor(""option"", ""value"");
        if (newPwd != confirmPwd) {
            document.getElementById('errorMessageText').innerHTML =");
            WriteLiteral(@" 'Passwords do not match!';
            showErrorAlert('Invalid Password!');
            return;
        }

        $.ajax(
        {
            async: true,
            type: 'POST',
            url: '/Home/UpdatePassword',
            data: { userName: uid, oldPassword: oPwd, password: newPwd},
            cache: false,
                success: function (data) {
                    updateSuccess();
            }
        });
    }

    function updateSuccess() {
        window.location.href = '/Home/Login';
    }
    function showErrorAlert(title) {
        $(""#errorMessage"").dialog({
            title: title,
            resizable: false,
            height: 250,
            width: 350,
            show: { effect: 'drop', direction: ""up"" },
            modal: true,
            draggable: false,
            open: function (event, ui) {
                $("".ui-dialog-titlebar-close"").hide();
            },
            buttons: {
                ""OK"": function () {
          ");
            WriteLiteral("          $(this).dialog(\"close\");\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n</script>\r\n<style>\r\n    input:hover {\r\n        color: initial;\r\n    }\r\n</style>\r\n<html>\r\n    ");
            EndContext();
            BeginContext(5365, 131, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2624317dfcec44049009c3437d8a6876", async() => {
                BeginContext(5371, 118, true);
                WriteLiteral("\r\n        <meta name=\"viewport\" content=\"width=device-width\" />\r\n        <title>User Password Management</title>\r\n    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(5496, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(5502, 2601, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9e2b61acb67442ee850dfba480fc0668", async() => {
                BeginContext(5508, 2588, true);
                WriteLiteral(@"
        <table width=""35%"" align=""center"">
            <tr>
                <td colspan=""2"" style=""font-size: large; height: 50px;""><strong>Password Update Required</strong></td>
            </tr>
            <tr>
                <td colspan=""2""> </td>
            </tr>
            <tr>
                <td>User Name:</td>
                <td align=""right"">
                    <div id=""textUserName""></div>
                </td>
            </tr>
            <tr>
                <td>Old Password:</td>
                <td align=""right"">
                    <div id=""textOldPassword""></div>
                </td>
            </tr>
            <tr>
                <td>New Password:</td>
                <td align=""right"">
                    <div id=""textNewPassword""></div>
                </td>
            </tr>
            <tr>
                <td>Confirm Password:</td>
                <td align=""right"">
                    <div id=""textConfirmPassword""></div>
                </td>
 ");
                WriteLiteral(@"           </tr>
            <tr>
                <td align=""right"" colspan=""2"">
                    <button id=""buttonSave"" type=""submit"" class=""btn btn-default"" onclick=""savePassword()"">
                        <span class=""glyphicon glyphicon-save""></span>Save Password
                    </button>
                </td>
            </tr>
        </table>
        <div id=""rules"" align=""center"">
            <table id=""rulesTable"">
                <tr>
                    <td id=""upperTd"" style=""color: red""><div id=""upper"">* Password must contain at least one upper case letter.</div></td>
                </tr>
                <tr>
                    <td id=""lowerTd"" style=""color: red""><div id=""lower"">* Password must contain at least one lower case letter.</div></td>
                </tr>
                <tr>
                    <td id=""specialTd"" style=""color: red""><div id=""special"">* Password must contain at least one special character.</div></td>
                </tr>
                <t");
                WriteLiteral(@"r>
                    <td id=""numberTd"" style=""color: red""><div id=""number"">* Password must contain at least one number.</div></td>
                </tr>
                <tr>
                    <td id=""lengthTd"" style=""color: red""><div id=""length"">* Password must must be at least 8 characters long.</div></td>
                </tr>
            </table>
        </div>
        <div id=""errorMessage"" style=""display: none"">
            <p>
                <div id=""errorMessageText""></div>
            </p>
        </div>
    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(8103, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
