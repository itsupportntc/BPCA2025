#pragma checksum "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\Home\AddEditInvoice.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "40b9b9a81f41ea4dd5276293ac8e89b62d2dae7a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_AddEditInvoice), @"mvc.1.0.view", @"/Views/Home/AddEditInvoice.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/AddEditInvoice.cshtml", typeof(AspNetCore.Views_Home_AddEditInvoice))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#line 2 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"40b9b9a81f41ea4dd5276293ac8e89b62d2dae7a", @"/Views/Home/AddEditInvoice.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b8fbd9faa897a3de153447734863bc8f11e1a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_AddEditInvoice : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/printer.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/arrow_undo.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/saved.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("64"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("64"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Bpca\BPCA latest\Latest BPCA-02112023\Latest-rollback\BPCAGit\BPCACondoDeficiencies\Views\Home\AddEditInvoice.cshtml"
  
    ViewData["Title"] = "Add/Edit Invoice";

#line default
#line hidden
            BeginContext(54, 51430, true);
            WriteLiteral(@"

<script type=""text/javascript"">

    var creditTypes;
    var invoiceComponents;
    var invoiceApproved;
    var alertMessage = """";
    var invoiceGuid = '00000000-0000-0000-0000-000000000000';
    var crFin = false;
    var adFin = false;
    var goP = {
        saveCompleteInternal: false,
        completeListener: function (val) { },
        set saveComplete(val) {
            this.aInternal = val;
            this.aListener(val);
        },
        get saveComplete() {
            return this.aInternal;
        },
        registerListener: function (listener) {
            this.aListener = listener;
        }
    };
    goP.registerListener(function (val) {
        showSaveSuccess();
    });

    $(document).ready
        (function () {
            checkSession();
            checkAdmin();
            $('#invoiceOptions').hide();
            $('#approvedMessage').hide();
            $('#saveButton').show();
            $('#submitButton').show();
            loadInvo");
            WriteLiteral(@"iceCreditTypes();
            loadInvoiceComponents();
            loadBuildings();
        });

    function getInvoiceApproved(ig) {
        $.ajax({
            type: ""GET"",
            url: '/Home/GetInvoiceApproved',
            data: { invoiceGuid: ig },
            cache: false,
            dataType: ""json"",
            contentType: ""application/json; charset=utf-8"",
            success: function (data) {
                data = jQuery.parseJSON(data);
                invoiceApproved = data[0].Approved;

                if (invoiceApproved) {
                    $('#approvedMessage').show();
                    $('#invoiceOptions').show();
                    $('#saveButton').hide();
                    $('#submitButton').hide();
                }
                else {
                    $('#approvedMessage').hide();
                    $('#invoiceOptions').hide();
                    $('#saveButton').show();
                    $('#submitButton').show();
                }");
            WriteLiteral(@"
            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function loadInvoiceCreditTypes() {
        $.ajax({
            type: ""GET"",
            url: '/Home/GetInvoiceCreditTypes',
            dataType: ""json"",
            contentType: ""application/json; charset=utf-8"",
            success: function (data) {
                creditTypes = jQuery.parseJSON(data);
            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function loadInvoiceComponents() {
        $.ajax({
            type: ""GET"",
            url: '/Home/GetInvoiceComponentsList',
            dataType: ""json"",
            contentType: ""application/json; charset=utf-8"",
            success: function (data) {
                invoiceComponents = jQuery.parseJSON(data);
           ");
            WriteLiteral(@" },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function loadBuildings() {
        $.ajax(
            {
                type: 'GET',
                url: '/Home/GetBuildingList',
                cache: false,
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: loadBuildingsSuccess,
                error: function (jqXHR, exception) {

                    console.log(jqXHR);
                    console.log(exception);
                }
            });
    }

    function loadBuildingsSuccess(data) {
        $(""#comboBuildings"").igCombo({
            width: ""270px"",
            textKey: ""Name"",
            valueKey: ""BuildingGuid"",
            dataSource: data,
            dataSourceType: ""json"",
            filteringType: ""local"",
            autoComplete: true,
            placeHolder: ""Se");
            WriteLiteral(@"lect a building..."",
            dropDownOrientation: ""bottom""
        });
        $(""#comboBuildings"").on(""igcomboselectionchanged"", function (evt, ui) {
            var bg = $(""#comboBuildings"").igCombo(""value"");
            var objDate = $(""#dateTimeInvoiceDate"").igDatePicker(""value"");
            var idt = objDate.getMonth() + 1 + ""/1/"" + objDate.getFullYear();
            loadBuildingSelection(bg, idt);
        });
        $(function () {
            $(""#dateTimeInvoiceDate"").igDatePicker({
                width: ""270px"",
                dateInputFormat: ""date"",
                regional: ""en-US"",
                required: true,
                nullText: ""Please select an invoice date..."",
                datepickerOptions: {
                    showWeek: false,
                    numberOfMonths: [1, 2]
                }
            });
        });
        $(""#dateTimeInvoiceDate"").on(""igdatepickervaluechanged"", function (evt, ui) {
            var objDate = $(""#dateTimeInvoiceDate");
            WriteLiteral(@""").igDatePicker(""value"");
            var idt;
            if (objDate.getDate() !== ""1"") {
                idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
                $(""#dateTimeInvoiceDate"").igDatePicker(""value"", idt);
            }
            else {
                idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
            }

            var bg = $(""#comboBuildings"").igCombo(""value"");
            if (bg !== null) {
                loadBuildingSelection(bg, idt);
            }
        });
        $(function () {
            $(""#textBaseRent"").igCurrencyEditor({
                width: ""270px"",
                required: true,
                nullText: ""Please specify the base rent amount..."",
                maxDecimals: 2,
                valueChanged: function (evt) {
                    calcInvoiceGrandTotal();
                }
            });
        });
        $(function () {
            $(""#textCivic"").igCurrencyEditor({
              ");
            WriteLiteral(@"  width: ""270px"",
                required: true,
                nullText: ""Please specify the civic facility amount..."",
                maxDecimals: 2,
                valueChanged: function (evt) {
                    calcInvoiceGrandTotal();
                }
            });
        });
        $(function () {
            $(""#textSupplemental"").igCurrencyEditor({
                width: ""270px"",
                required: true,
                nullText: ""Please specify the supplemental amount..."",
                maxDecimals: 2,
                valueChanged: function (evt) {
                    calcInvoiceGrandTotal();
                }
            });
        });
        $(function () {
            $(""#textPILOT"").igCurrencyEditor({
                width: ""270px"",
                required: true,
                nullText: ""Please specify the PILOT amount..."",
                maxDecimals: 2, 
                valueChanged: function (evt) {
                    calcInvoiceGrandTotal(");
            WriteLiteral(@");
                }
            });
        });
        $(function () {
            $(""#textInvoiceTotal"").igCurrencyEditor({
                width: ""270px"",
                required: true,
                readOnly: true,
                maxDecimals: 2,
                value: 0
            });
        });
        $(function () {
            $(""#textTotal"").igCurrencyEditor({
                width: ""270px"",
                readOnly: true,
                maxDecimals: 2,
                value: 0
            });
        });
        $(function () {
            $(""#textBaseRent"").igCurrencyEditor(""value"", 0);
            $(""#textCivic"").igCurrencyEditor(""value"", 0);
            $(""#textSupplemental"").igCurrencyEditor(""value"", 0);
            $(""#textPILOT"").igCurrencyEditor(""value"", 0);
            $(""#textInvoiceTotal"").igCurrencyEditor(""value"", 0);
            $(""#textTotal"").igCurrencyEditor(""value"", 0);
        });
        $(function () {
            loadInvoiceCredits(null);
  ");
            WriteLiteral(@"          loadInvoiceRollbacks(null);
        });
    }

    function loadBuildingSelection(bg, idt) {
        $.ajax(
        {
            type: 'GET',
            async: true,
            url: '/Home/InvoiceExists',
            data: { buildingGuid: bg, invoiceDate: idt },
            dataType: ""json"",
            success: function (response) {
                if (response.invoiceGuid !== '00000000-0000-0000-0000-000000000000') {
                    invoiceGuid = response.invoiceGuid;
                    var url = reportPath + 'rt=i&ig=' + response.invoiceGuid;
                    document.getElementById('printInvoiceLink').setAttribute(""href"", url);

                    $.ajax(
                        {
                            type: 'GET',
                            async: true,
                            url: '/Home/GetInvoiceHeader',
                            data: { invoiceGuid: response.invoiceGuid },
                            dataType: ""json"",
                      ");
            WriteLiteral(@"      success: function (response) {
                                response = jQuery.parseJSON(response);
                                $(""#textBaseRent"").igCurrencyEditor(""value"", response[0].BaseRent);
                                $(""#textCivic"").igCurrencyEditor(""value"", response[0].CivicFacility);
                                $(""#textSupplemental"").igCurrencyEditor(""value"", response[0].Supplemental);
                                $(""#textPILOT"").igCurrencyEditor(""value"", response[0].Pilot);
                                $(""#textInvoiceTotal"").igCurrencyEditor(""value"", response[0].InvoiceTotal);
                                loadInvoiceCredits(response[0].invoiceGuid);
                                getInvoiceApproved(response[0].invoiceGuid);
                            },
                            error: function (jqXHR, exception) {
                                console.log(jqXHR);
                                console.log(exception);
                            }
  ");
            WriteLiteral(@"                      });
                }
                else {
                    $(""#textBaseRent"").igCurrencyEditor(""value"", 0);
                    $(""#textCivic"").igCurrencyEditor(""value"", 0);
                    $(""#textSupplemental"").igCurrencyEditor(""value"", 0);
                    $(""#textPILOT"").igCurrencyEditor(""value"", 0);
                    $(""#textInvoiceTotal"").igCurrencyEditor(""value"", 0);
                    $(""#textTotal"").igCurrencyEditor(""value"", 0);
                    loadInvoiceCredits('00000000-0000-0000-0000-000000000000');
                    getInvoiceApproved('00000000-0000-0000-0000-000000000000');
                    invoiceGuid = '00000000-0000-0000-0000-000000000000';
                }
            },
            error: function (jqXHR, exception) {

                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function loadInvoiceCredits(ig) {
        $.ajax(
        {
            type: 'GET',
   ");
            WriteLiteral(@"         url: '/Home/GetInvoiceCredits',
            data: { invoiceGuid: ig },
            cache: false,
            dataType: ""json"",
            contentType: ""application/json; charset=utf-8"",
                success: function (data) {
                $(""#gridCreditAdjustments"").igGrid({
                    renderCheckboxes: true,
                    primaryKey: ""RowId"",
                    autoGenerateColumns: false,
                    columns:
                        [
                            { headerText: ""RowId"", key: ""RowId"", dataType: ""number"", width: ""0%"" },
                            { headerText: ""InvoiceGuid"", key: ""InvoiceGuid"", dataType: ""string"", width: ""0%"" },
                            { headerText: ""Credit"", key: ""CreditId"", dataType: ""number"", width: ""0%"" },
                            { headerText: ""Description"", key: ""UserDescription"", dataType: ""string"", width: ""60%"" },
                            { headerText: ""Date From"", key: ""UserDateFrom"", dataType: ""date"", w");
            WriteLiteral(@"idth: ""0%"" },
                            { headerText: ""Date To"", key: ""UserDateTo"", dataType: ""date"", width: ""0%"" },
                            { headerText: ""BaseRent"", key: ""BaseRent"", dataType: ""number"", width: ""10%"", format: ""currency"" },
                            { headerText: ""CivicFacility"", key: ""CivicFacility"", dataType: ""number"", width: ""10%"", format: ""currency"" },
                            { headerText: ""Supplemental"", key: ""Supplemental"", dataType: ""number"", width: ""10%"", format: ""currency"" },
                            { headerText: ""PILOT"", key: ""PILOT"", dataType: ""number"", width: ""10%"", format: ""currency"" },
                            { headerText: ""Amount"", key: ""Amount"", dataType: ""number"", width: ""10%"", format: ""currency"" },
                            {
                                headerText: """",
                                key: ""Delete"",
                                unbound: true,
                                template: ""<input type='image' src='/images/del");
            WriteLiteral(@"ete.png' onclick='deleteInvoiceCredit(${RowId})' />"",
                                width: ""5%"",
                                columnCssClass: ""deleteAlign"" 
                            }
                        ],
                    dataSource: data,
                    autoCommit: true,
                    autofitLastColumn: true,
                    dataSourceType: ""json"",
                    responseDataKey: ""results"",
                    width: ""100%"",
                    tabIndex: 1,
                    features: [
                        {
                            name: ""Updating"",
                            locale: {
                                addRowLabel: ""Add invoice credit..."",
                                rowEditDialogCaptionLabel: ""Add Invoice Credit""
                            },
                            enableAddRow: true,
                            enableUpdateRow: true,
                            enableDeleteRow: false,
                            ");
            WriteLiteral(@"startEditTriggers: ""dblclick"",
                            editMode: ""dialog"",
                            columnSettings: [
                                {
                                    columnKey: ""CreditId"",
                                    required: true,
                                    editorType: ""combo"",
                                    editorOptions: {
                                        mode: ""dropdown"",
                                        dataSource: creditTypes,
                                        textKey: ""CreditDesc"",
                                        valueKey: ""CreditId"",
                                        dropDownOnReadOnly: true,
                                        dropDownWidth: 300
                                    }
                                },
                                {
                                    columnKey: ""UserDescription"",
                                    editorType: ""text"",
                       ");
            WriteLiteral(@"             readOnly: false,
                                    required: true,
                                    validation: true,
                                    editorOptions: {
                                        height: 100,
                                        width: 300,
                                        textMode: ""multiline"",
                                        textWrapping: ""wrap""
                                    }
                                },
                                {
                                    columnKey: ""UserDateFrom"",
                                    editorType: ""datepicker"",
                                    readOnly: false,
                                    required: false,
                                    validation: false
                                },
                                {
                                    columnKey: ""UserDateTo"",
                                    editorType: ""datepicker"",
  ");
            WriteLiteral(@"                                  readOnly: false,
                                    required: false,
                                    validation: false
                                },
                                {
                                    columnKey: ""Delete"",
                                    readOnly: true
                                }],
                            rowEditDialogOptions: {
                                captionLabel: ""Add Invoice Credit"",
                                width: 450,
                                height: 450,
                                dialogTemplateSelector: ""#creditDialogTemplate"",
                                editorsTemplateSelector: ""#creditEditorsTemplate"",
                                containment: ""ui"",
                                animationDuration: 400,
                                showReadonlyEditors: false
                            },
                            rowEditDialogAfterClose: function (ev");
            WriteLiteral(@"t, ui) {
                                calcInvoiceGrandTotal();
                            },
                        },
                        {
                            name: 'Hiding',
                            columnSettings:
                                [
                                    {
                                        columnKey: 'RowId',
                                        allowHiding: false,
                                        hidden: true
                                    },
                                    {
                                        columnKey: 'InvoiceGuid',
                                        allowHiding: false,
                                        hidden: true
                                    },
                                    {
                                        columnKey: 'CreditId',
                                        allowHiding: false,
                                        hidden: false
         ");
            WriteLiteral(@"                           },
                                    {
                                        columnKey: 'UserDescription',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'UserDateFrom',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'UserDateTo',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'Amount',
                                        allowHiding: false,
                                        h");
            WriteLiteral(@"idden: true
                                    },
                                    {
                                        columnKey: 'Delete',
                                        allowHiding: false,
                                        hidden: false
                                    }
                                ]
                        }
                    ],

                });
                loadInvoiceRollbacks(ig);
            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function loadInvoiceRollbacks(ig) {
        $.ajax(
        {
            type: 'GET',
            url: '/Home/GetInvoiceRollbacks',
            data: { invoiceGuid: ig },
            cache: false,
            dataType: ""json"",
            contentType: ""application/json; charset=utf-8"",
                success: function (data) {
                $(""#gridAllocatedAdju");
            WriteLiteral(@"stments"").igGrid({
                    renderCheckboxes: true,
                    primaryKey: ""rollbackId"",
                    autoGenerateColumns: false,
                    columns:
                        [
                            { headerText: ""rollbackId"", key: ""rollbackId"", dataType: ""string"", width: ""0%"" },
                            { headerText: ""invoiceGuid"", key: ""invoiceGuid"", dataType: ""string"", width: ""0%"" },
                            { headerText: ""Rollback Type"", key: ""invoiceComponentId"", dataType: ""string"", width: ""0%"" },
                            { headerText: ""Rollback For"", key: ""invoiceRollbackFor"", dataType: ""string"", width: ""40%"" },
                            { headerText: ""Date From"", key: ""dateFrom"", dataType: ""date"", width: ""15%"" },
                            { headerText: ""Date To"", key: ""dateTo"", dataType: ""date"", width: ""15%"" },
                            { headerText: ""Rollback Amount"", key: ""rollbackAmount"", dataType: ""number"", width: ""20%"", format: ""c");
            WriteLiteral(@"urrency"" },
                            { headerText: ""Adj. Amount"", key: ""adjustmentAmount"", dataType: ""number"", width: ""20%"", format: ""currency"" },
                            {
                                headerText: """",
                                key: ""Delete"",
                                unbound: true,
                                template: ""<input type='image' src='/images/delete.png' onclick='deleteAllocatedAdjustment(${rollbackId})' />"",
                                width: ""5%"",
                                columnCssClass: ""deleteAlign"" 
                            }
                        ],
                    dataSource: data,
                    autoCommit: true,
                    autofitLastColumn: true,
                    dataSourceType: ""json"",
                    responseDataKey: ""results"",
                    width: ""100%"",
                    tabIndex: 1,
                    features: [
                        {
                            name: ");
            WriteLiteral(@"""Updating"",
                            locale: {
                                addRowLabel: ""Add allocated adjustment..."",
                                rowEditDialogCaptionLabel: ""Add Allocated Adjustment""
                            },
                            enableAddRow: true,
                            enableUpdateRow: true,
                            enableDeleteRow: false,
                            editRowEnding: function (evt, ui) {
                                if (ui.values[""dateFrom""] == null || ui.values[""dateTo""] == null) { return; }

                                var cid = ui.values[""invoiceComponentId""];
                                ui.values[""invoiceRollbackFor""] = invoiceComponents.find(x => x.invoiceComponentId === cid).ComponentName;
                                var objDate;
                                objDate = ui.values[""dateFrom""];
                                var df = objDate.getMonth() + 1 + ""/1/"" + objDate.getFullYear();
                  ");
            WriteLiteral(@"              objDate = ui.values[""dateTo""];
                                var dt = objDate.getMonth() + 1 + ""/"" + objDate.getDay() + ""/"" + objDate.getFullYear();
                                var a = ui.values[""rollbackAmount""];
                                objDate = $(""#dateTimeInvoiceDate"").igDatePicker(""value"");
                                var cd = objDate.getMonth() + 1 + ""/1/"" + objDate.getFullYear();
                                var bg = $(""#comboBuildings"").igCombo(""value"");
                                var adjType;
                                if (cid == 1) { adjType = 'B'; }
                                if (cid == 2) { adjType = 'C'; }
                                if (cid == 3) { adjType = 'P'; }
                                if (cid == 4) { adjType = 'S'; }
                                $.ajax(
                                {
                                    type: 'GET',
                                    async: false,
                             ");
            WriteLiteral(@"       url: '/Home/CalculateAdjustmentDifference',
                                    data: { adjustType: adjType, dateFrom: df, dateTo: dt, currentDate: cd, buildingGuid: bg, amount: a },
                                    success: function (adj) {
                                        ui.values[""adjustmentAmount""] = adj;
                                    },
                                    error: function (jqXHR, exception) {
                                        console.log(jqXHR);
                                        console.log(exception);
                                    }
                                });
                            },
                            rowEditDialogAfterClose: function (evt, ui) {
                                calcInvoiceGrandTotal();
                            },
                            startEditTriggers: ""dblclick"",
                            editMode: ""dialog"",
                            columnSettings: [
                      ");
            WriteLiteral(@"          {
                                    columnKey: ""invoiceComponentId"",
                                    required: true,
                                    editorType: ""combo"",
                                    editorOptions: {
                                        mode: ""dropdown"",
                                        dataSource: invoiceComponents,
                                        textKey: ""ComponentName"",
                                        valueKey: ""invoiceComponentId"",
                                        dropDownOnReadOnly: true
                                    },
                                    validation: true
                                },
                                {
                                    columnKey: ""invoiceRollbackFor"",
                                    readOnly: true
                                },
                                {
                                    columnKey: ""dateFrom"",
                     ");
            WriteLiteral(@"               readOnly: false,
                                    editorType: ""datepicker"",
                                    editorOptions: {
                                        dateDisplayFormat: ""date"",
                                        dataMode: ""date""
                                    }
                                },
                                {
                                    columnKey: ""dateTo"",
                                    readOnly: false,
                                    editorType: ""datepicker"",
                                    editorOptions: {
                                        dateDisplayFormat: ""date"",
                                        dataMode: ""date""
                                    }
                                },
                                {
                                    columnKey: ""rollbackAmount"",
                                    visible: true,
                                    readOnly: false,
 ");
            WriteLiteral(@"                                   required: true,
                                    editorType: ""currency""
                                },
                                {
                                    columnKey: ""adjustmentAmount"",
                                    visible: false,
                                    required: false,
                                    readOnly: true
                                },
                                {
                                    columnKey: ""Delete"",
                                    visible: false,
                                    readOnly: true
                                }
                            ],
                            rowEditDialogOptions: {
                                captionLabel: ""Add Allocated Adjustment"",
                                width: 450,
                                height: 450,
                                dialogTemplateSelector: ""#rollbackDialogTemplate"",
          ");
            WriteLiteral(@"                      editorsTemplateSelector: ""#rollbackEditorsTemplate"",
                                containment: ""ui"",
                                animationDuration: 400,
                                showReadonlyEditors: false
                            }
                        },
                        {
                            name: 'Hiding',
                            columnSettings: [
                                {
                                    columnKey: 'rollbackId',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'invoiceGuid',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'invoiceComponentId',
               ");
            WriteLiteral(@"                     allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'invoiceRollbackFor',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'dateFrom',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'dateTo',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'rollbackAmount',
                                    allowHiding: false,
            ");
            WriteLiteral(@"                        hidden: false
                                },
                                {
                                    columnKey: 'adjustmentAmount',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'Delete',
                                    allowHiding: false,
                                    hidden: false
                                }
                            ]
                        }
                    ]
                });
                calcInvoiceGrandTotal();
            },
            error: function (jqXHR, exception) {
                console.log(jqXHR);
                console.log(exception);
            }
        });
    }

    function getAdjustmentDifference(cid, df, dt, cd, bg, a) {
        $.get(""/Home/CalculateAdjustmentDifference"",
            {
        ");
            WriteLiteral(@"        adjustType: cid, dateFrom: df, dateTo: dt, currentDate: cd, buildingGuid: bg, amount: a
            }
            , function (adj) {
                return adj;
            });
    }

    function showErrorAlert(title) {
        $(""#errorMessage"").dialog({
            title: title,
            resizable: false,
            height: 250,
            width: 350,
            show: { effect: 'drop', direction: ""up"" },
            modal: true,
            draggable: false,
            open: function (event, ui) {
                $("".ui-dialog-titlebar-close"").hide();
            },
            buttons: {
                ""OK"": function () {
                    $(this).dialog(""close"");

                }
            }
        });

    }

    function showSaveSuccess() {
        $(""#savedDialog"").dialog({
            title: 'Invoice Saved!',
            resizable: false,
            height: 300,
            width: 350,
            show: { effect: 'drop', direction: ""up"" },
 ");
            WriteLiteral(@"           modal: true,
            draggable: false,
            open: function (event, ui) {
                $("".ui-dialog-titlebar-close"").hide();
            },
            buttons: {
                ""Yes"": function () {
                    $(this).dialog(""close"");
                    printSavedInvoice(invoiceGuid);
                    location.reload();
                },
                ""No"": function () {
                    $(this).dialog(""close"");
                    location.reload();
                }
            }
        });

    }

    function deleteInvoiceCredit(RowId) {
      
        if (invoiceApproved) {
            document.getElementById('alertMessage').innerHTML = 'You cannot delete this credit because a worksheet has been approved against this invoice!';
            showErrorAlert('Cannot Delete Credit!');
            return;
        }
        $.ajax(
        {
            async: true,
            type: 'POST',
            url: '/Home/DeleteInvoiceCredit'");
            WriteLiteral(@",
                data: { rowId: RowId},
            cache: false,
            success: function (data) {
                loadInvoiceCredits(invoiceGuid);
                CalcInvoiceGrandTotal();
            }
        });
    }

    function deleteAllocatedAdjustment(rollbackId) {
        if (invoiceApproved) {
            document.getElementById('alertMessage').innerHTML = 'You cannot delete this allocated adjustment because a worksheet has been approved against this invoice!';
            showErrorAlert('Cannot Delete Allocated Adjustment!');
            return;
        }
        $.ajax(
        {
            async: true,
            type: 'POST',
            url: '/Home/DeleteRollback',
            data: { rollbackId: rollbackId },
            cache: false,
            success: function (data) {
                loadInvoiceRollbacks();
                calcInvoiceGrandTotal();
            }
        });
    }

    function calcInvoiceGrandTotal() {
        var bg = 0;
        v");
            WriteLiteral(@"ar cv = 0;
        var su = 0;
        var pl = 0;

        bg = $(""#textBaseRent"").igCurrencyEditor(""value"");
        cv = $(""#textCivic"").igCurrencyEditor(""value"");
        su = $(""#textSupplemental"").igCurrencyEditor(""value"");
        pl = $(""#textPILOT"").igCurrencyEditor(""value"");

        if (isNaN(bg)) { bg = 0; }
        if (isNaN(cv)) { cv = 0; }
        if (isNaN(su)) { su = 0; }
        if (isNaN(pl)) { pl = 0; }

        var cr = getCreditSum();
        var ad = getAllocatedAdjustmentSum();

        var invTotal = (bg + cv + su + pl);
        $(""#textInvoiceTotal"").igCurrencyEditor(""value"", invTotal);

        var grandTotal = invTotal + (cr + ad);
        $(""#textTotal"").igCurrencyEditor(""value"", grandTotal);
    }

    function getCreditSum() {
        if ($(""#gridCreditAdjustments"").data(""igGrid"") != null) {
            var $grid = $(""#gridCreditAdjustments"");
            var rows = $grid.igGrid(""allRows"");
            var rowId;
            var retVal = 0;
        ");
            WriteLiteral(@"    //	Loop through each row in the grid.
            $.each(rows, function (index, row) {
                rowId = $(row).attr(""data-id"");	//	This attribute stores the row's primary key.
                retVal += $grid.igGrid(""getCellValue"", rowId, ""Amount"");
            });
            if (isNaN(retVal)) { retVal = 0; }
            return retVal;
        }
        else {
            return 0;
        }
    }

    function getAllocatedAdjustmentSum() {
        var $grid = $(""#gridAllocatedAdjustments"");
        var rows = $grid.igGrid(""allRows"");
        var rowId;
        var retVal = 0;
        //	Loop through each row in the grid.
        $.each(rows, function (index, row) {
            rowId = $(row).attr(""data-id"");	//	This attribute stores the row's primary key.
            retVal += $grid.igGrid(""getCellValue"", rowId, ""adjustmentAmount"");
        });
        if (isNaN(retVal)) { retVal = 0; }
        return retVal;
    }

    function saveInvoice() {
        if (!validateInp");
            WriteLiteral(@"uts()) { return; }

        var br = $(""#textBaseRent"").igCurrencyEditor(""value"");
        
        var cv = $(""#textCivic"").igCurrencyEditor(""value"");
        var sp = $(""#textSupplemental"").igCurrencyEditor(""value"");
        var pl = $(""#textPILOT"").igCurrencyEditor(""value"");
        var bg = $(""#comboBuildings"").igCombo(""value"");

        var objDate = $(""#dateTimeInvoiceDate"").igDatePicker(""value"");
        var idt;
        if (objDate.getDate() !== ""1"") {
            idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
            $(""#dateTimeInvoiceDate"").igDatePicker(""value"", idt);
        }
        else {
            idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
        }
        
        $.ajax(
            {

                type: 'GET',
                url: '/Home/SaveInvoice',
                data: { invoiceGuid: invoiceGuid, invoiceDate: idt, baseRent: br, civic: cv, suppl: sp, pilot: pl, buildingGuid: bg },
                cache: false,
    ");
            WriteLiteral(@"            async: false,
                success: function (data) {
               
                    data = jQuery.parseJSON(data);
                    invoiceGuid = data[0].InvoiceGuid;
                    $.post('/Home/ClearInvoiceCredits', { invoiceGuid: invoiceGuid })
                        .done(function () {
                            if ($(""#gridCreditAdjustments"").data(""igGrid"") != null) {

                                var $grid = $(""#gridCreditAdjustments"");
                                var rows = $grid.igGrid(""allRows"");
                                var rowId;
                                var df;
                                var dt;
                                var ud = """";
                                var amt;
                                var objDate;
                                var ci;

                                
                                if (rows.length > 0) {
                                    try {
                            ");
            WriteLiteral(@"            //	Loop through each row in the grid.
                                        $.each(rows, function (index, row) {
                                            rowId = $(row).attr(""data-id"");

                                            ci = $grid.igGrid(""getCellValue"", rowId, ""CreditId"");
                                            if ($grid.igGrid(""getCellValue"", rowId, ""UserDateFrom"") != null) {
                                                objDate = $grid.igGrid(""getCellValue"", rowId, ""UserDateFrom"");
                                                df = (objDate.getMonth() + 1) + ""/"" + objDate.getDate() + ""/"" + objDate.getFullYear();
                                            }
                                            else {
                                                df = null;
                                            }
                                            if ($grid.igGrid(""getCellValue"", rowId, ""UserDateTo"") != null) {
                                         ");
            WriteLiteral(@"       objDate = $grid.igGrid(""getCellValue"", rowId, ""UserDateTo"");
                                                dt = (objDate.getMonth() + 1) + ""/"" + objDate.getDate() + ""/"" + objDate.getFullYear();
                                            }
                                            else {
                                                dt = null;
                                            }
                                            ud = $grid.igGrid(""getCellValue"", rowId, ""UserDescription"");
                                            amt = 0;
                                            /*br = parseInt($grid.igGrid(""getCellValue"", rowId, ""BaseRent"")) || 0;*/
                                            br = parseFloat($grid.igGrid(""getCellValue"", rowId, ""BaseRent"")) || 0;
                                            cv = parseFloat($grid.igGrid(""getCellValue"", rowId, ""CivicFacility"")) || 0;
                                            supp = parseFloat($grid.igGrid(""getCellValue"", rowId, ");
            WriteLiteral(@"""Supplemental"")) || 0;
                                            pilot = parseFloat($grid.igGrid(""getCellValue"", rowId, ""PILOT"")) || 0;
                                            amt = br + cv + supp + pilot;
                                            try {
                                                $.post('/Home/SaveInvoiceCredit', {
                                                    invoiceGuid: invoiceGuid, creditId: ci,
                                                    creditAmount: amt, BaseRent: br, CivicFacility: cv, Supplemental: supp, PILOT: pilot, userDesc: ud, dateFrom: df, dateTo: dt
                                                });
                                            }
                                            catch (err) {
                                                console.log(err);
                                            }

                                            if ((index + 1) == rows.length) {
                                                ");
            WriteLiteral(@"crFin = true;
                                                if (crFin && adFin) { goP.saveComplete = true; }
                                            }
                                        });
                                    }
                                    catch (err) {
                                        console.log(err);
                                    }
                                }
                                else {
                                    crFin = true;
                                    if (crFin && adFin) { goP.saveComplete = true; }
                                }
                            }
                            else {
                                crFin = true;
                                if (crFin && adFin) { goP.saveComplete = true; }
                            }
                        });
                    $.post('/Home/ClearInvoiceRollbacks', { invoiceGuid: invoiceGuid })
                        .done(function ");
            WriteLiteral(@"() {
                            if ($(""#gridAllocatedAdjustments"").data(""igGrid"") != null) {
                                var bg = $(""#comboBuildings"").igCombo(""value"");
                                var $grid = $(""#gridAllocatedAdjustments"");
                                var rows = $grid.igGrid(""allRows"");
                                var objDate;
                                objDate = $(""#dateTimeInvoiceDate"").igDatePicker(""value"");
                                var idt;
                                if (objDate.getDate() !== ""1"") {
                                    idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
                                }
                                else {
                                    idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
                                }
                                var adjRowId;
                                var adjDf;
                                var adjDt;
        ");
            WriteLiteral(@"                        var invCompId;
                                var adjAmt;

                                if (rows.length > 0) {
                                    try {
                                        $.each(rows, function (index, row) {
                                            adjRowId = $(row).attr(""data-id"");
                                            invCompId = $grid.igGrid(""getCellValue"", adjRowId, ""invoiceComponentId"");

                                            objDate = $grid.igGrid(""getCellValue"", adjRowId, ""dateFrom"");
                                            adjDf = (objDate.getMonth() + 1) + ""/"" + objDate.getDate() + ""/"" + objDate.getFullYear();

                                            objDate = $grid.igGrid(""getCellValue"", adjRowId, ""dateTo"");
                                            adjDt = (objDate.getMonth() + 1) + ""/"" + objDate.getDate() + ""/"" + objDate.getFullYear();

                                            adjAmt = $grid.igGrid(""getCel");
            WriteLiteral(@"lValue"", adjRowId, ""rollbackAmount"");
                                            try {
                                                $.post('/Home/SaveInvoiceRollbacks', {
                                                    invoiceGuid: invoiceGuid, buildingGuid: bg, invoiceComponentId: invCompId,
                                                    dateFrom: adjDf, dateTo: adjDt, amount: adjAmt, invoiceDate: idt
                                                });
                                            }
                                            catch (err) {
                                                console.log(err);
                                            }

                                            if ((index + 1) == rows.length) {
                                                adFin = true;
                                                if (crFin && adFin) { goP.saveComplete = true; }
                                            }
                                      ");
            WriteLiteral(@"  });
                                    }
                                    catch (err) {
                                        console.log(err);
                                    }
                                }
                                else {
                                    adFin = true;
                                    if (crFin && adFin) { goP.saveComplete = true; }
                                }
                            }
                            else {
                                adFin = true;
                                if (crFin && adFin) { goP.saveComplete = true; }
                            }
                        });
                },
                error: function () {
                    console.log('error');
                }
            });
    }

    function printSavedInvoice(ig)
    {
        if (crFin && adFin) {
            var url = reportPath + 'rt=i&ig=' + ig;
            window.open(url, '_blank');
        }
 ");
            WriteLiteral(@"   }

    function submitInvoice() {
        if (!validateInputs()) { return; }
    }

    function validateInputs() {
        var objDate = $(""#dateTimeInvoiceDate"").igDatePicker(""value"");
        var br = $(""#textBaseRent"").igCurrencyEditor(""value"");
        var cv = $(""#textCivic"").igCurrencyEditor(""value"");
        var sp = $(""#textSupplemental"").igCurrencyEditor(""value"");
        var pl = $(""#textPILOT"").igCurrencyEditor(""value"");
        var bg = $(""#comboBuildings"").igCombo(""value"");
        
        if (objDate == null || objDate == '' || objDate.length == 0) {
            document.getElementById('alertMessage').innerHTML = 'You must specify the invoice date to continue!';
            showErrorAlert('Required Field Missing!');
            return false;
        }
        if (bg == null || bg == '00000000-0000-0000-0000-000000000000' || bg.length == 0) {
            document.getElementById('alertMessage').innerHTML = 'You must select a building to continue!';
            showErrorAl");
            WriteLiteral(@"ert('Required Field Missing!');
            return false;
        }
        if (br == null || br == '' || br.length == 0) {
            document.getElementById('alertMessage').innerHTML = 'You must specify the base rent to continue!';
            showErrorAlert('Required Field Missing!');
            return false;
        }
        return true;
    }

    function getTempKey() {
        var key = 1;
        var $grid = $(""#gridCreditAdjustments"");
        var rows = $grid.igGrid(""allRows"");
        var rowId;

        $.each(rows, function (index, row) {
            rowId = $(row).attr(""data-id"");	
            if ($grid.igGrid(""getCellValue"", rowId, ""RowId"") > key)
                key = $grid.igGrid(""getCellValue"", rowId, ""RowId"");
            key += 1;
        });
        return key;
    }

</script>

<script id=""allocatedDialogTemplate"" type=""text/html"">
    <div style=""float: left; width: 100%"">
        <strong>${Name}</strong><br />
        <table style=""width: 100%;"">
    ");
            WriteLiteral(@"        <colgroup>
                <col style=""width: 30%;"" />
                <col style=""width: 200%;"" />
            </colgroup>
            <tbody data-render-tmpl=""true""></tbody>
        </table>
    </div>
</script>

<script id=""allocatedEditorsTemplate"" type=""text/html"">
    <tr>
        <td valign=""top"" style=""color: black;"">${headerText}</td>
        <td>
            <input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" />
        </td>
    </tr>
</script>

<script id=""creditDialogTemplate"" type=""text/html"">
    <div style=""float: left; width: 100%"">
        <strong>${Name}</strong><br />
        <table style=""width: 100%;"">
            <colgroup>
                <col style=""width: 30%;"" />
                <col style=""width: 200%;"" />
            </colgroup>
            <tbody data-render-tmpl=""true""></tbody>
        </table>
    </div>
</script>

<script id=""creditEditorsTemplate"" type=""text/html"">
    <tr>
        <td valign=""top"" style=""color: b");
            WriteLiteral(@"lack;"">${headerText}</td>
        <td>
            <input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" />
        </td>
    </tr>
</script>

<script id=""rollbackDialogTemplate"" type=""text/html"">
    <div style=""float: left; width: 100%"">
        <strong>${Name}</strong><br />
        <table style=""width: 100%;"">
            <colgroup>
                <col style=""width: 30%;"" />
                <col style=""width: 200%;"" />
            </colgroup>
            <tbody data-render-tmpl=""true""></tbody>
        </table>
    </div>
</script>

<script id=""rollbackEditorsTemplate"" type=""text/html"">
    <tr>
        <td valign=""top"" style=""color: black;"">${headerText}</td>
        <td>
            <input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" />
        </td>
    </tr>
</script>

<meta name=""viewport"" content=""width=device-width"" />
<title>Add/Edit Invoice</title>

<style>
    td.edge {
        width: 17%;
        vertical-align: top;
");
            WriteLiteral("    }\r\n\r\n    #gridAllocatedAdjustements tr td {\r\n        white-space: nowrap;\r\n    }\r\n\r\n    #gridCreditAdjustments tr td {\r\n        white-space: nowrap;\r\n    }\r\n    \r\n    input:hover {\r\n        color: initial;\r\n    }\r\n</style>\r\n\r\n");
            EndContext();
            BeginContext(51484, 4575, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "66c28011830d4c6ba871a719bedf676f", async() => {
                BeginContext(51490, 595, true);
                WriteLiteral(@"

    <style type=""text/css"">
        #gridCreditAdjustments tr td {
            white-space: nowrap;
        }

        .deleteAlign {
            text-align: right !important;
        }
    </style>

    <table style=""width: 100%"">
        <tr>
            <td class=""edge""><strong>Invoice Date:</strong></td>
            <td>
                <div id=""dateTimeInvoiceDate""></div>
            </td>
            <td rowspan=""7"" valign=""top"">
                <div id=""invoiceOptions"">
                    <table>
                        <tr>
                            <td>");
                EndContext();
                BeginContext(52085, 34, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "356d32f34cfe433b948fad5e83276d08", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(52119, 231, true);
                WriteLiteral("</td>\r\n                            <td style=\"padding-left: 5px\"><a id=\"printInvoiceLink\" href=\"\" target=\"_blank\">Print Invoice</a></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>");
                EndContext();
                BeginContext(52350, 37, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "d847e9c22f5545c8b194280b001bf0b7", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(52387, 3532, true);
                WriteLiteral(@"</td>
                            <td style=""padding-left: 5px""><a href="""">Reverse Invoice Approval</a></td>
                        </tr>
                    </table>
                </div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Building:</strong></td>
            <td colspan=""2"">
                <div id=""comboBuildings""></div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Base Rent:</strong></td>
            <td colspan=""2"">
                <div id=""textBaseRent""></div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Civic Facility:</strong></td>
            <td colspan=""2"">
                <div id=""textCivic""></div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Supplemental:</strong></td>
            <td colspan=""2"">
                <div id=""textSupplemental""></div>
            </td>
        </tr>
        <tr>
            <td cl");
                WriteLiteral(@"ass=""edge""><strong>PILOT:</strong></td>
            <td colspan=""2"">
                <div id=""textPILOT""></div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Invoice Total:</strong></td>
            <td colspan=""2"">
                <div id=""textInvoiceTotal""></div>
            </td>
        </tr>
        <tr>
            <td colspan=""3"" align=""left""><strong>Adjustments Allocated to Units by this System</strong></td>
        </tr>
        <tr>
            <td colspan=""3"">
                <div id=""gridAllocatedAdjustments""></div>
            </td>
        </tr>
        <tr>
            <td colspan=""3"" align=""left""><strong>Adjustments not Allocated to Units by this System</strong></td>
        </tr>
        <tr>
            <td colspan=""3"">
                <div id=""gridCreditAdjustments""></div>
            </td>
        </tr>
        <tr>
            <td class=""edge""><strong>Invoice Total (Including Adjustments):</strong></td>
            <td colsp");
                WriteLiteral(@"an=""2"">
                <div id=""textTotal""></div>
            </td>
        </tr>
        <tr style=""background-color: lightgray"">
            <td colspan=""3"">
                <table width=""100%"">
                    <tr>
                        <td align=""left"" width=""60%"" style=""color: red;padding-top: 20px;""><div id=""approvedMessage"">A worksheet for this invoice has already been approved. Changes cannot be made!</div></td>
                    </tr>
                    <tr>
                        <td align=""right"">
                            <div id=""saveButton"">
                                <button id=""buttonSave"" type=""submit"" class=""btn btn-default"" onclick=""saveInvoice()"">
                                    <span class=""glyphicon glyphicon-save""></span>Save Invoice
                                </button>
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
    <div ");
                WriteLiteral(@"id=""errorMessage"" style=""display: none"">
        <p>
            <div id=""alertMessage""></div>
        </p>
    </div>
    <div id=""savedDialog"" style=""display: none"">
        <p>
            <table>
                <tr>
                    <td align=""center"">The invoice has been saved successfully! Do you wish to print the invoice?</td>
                </tr>
                <tr>
                    <td align=""center"" style=""padding-top: 20px"">");
                EndContext();
                BeginContext(55919, 55, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "827f8121fc734d33af4972e76160b41b", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(55974, 78, true);
                WriteLiteral("</td>\r\n                </tr>\r\n            </table>\r\n        </p>\r\n    </div>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
