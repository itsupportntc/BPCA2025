#pragma checksum "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "45562b8c69c472724f101123c1b3eb5f87ddab08"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_AddEditUnitOwner), @"mvc.1.0.view", @"/Views/Home/AddEditUnitOwner.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/AddEditUnitOwner.cshtml", typeof(AspNetCore.Views_Home_AddEditUnitOwner))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 2 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
#line 1 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"45562b8c69c472724f101123c1b3eb5f87ddab08", @"/Views/Home/AddEditUnitOwner.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7ea6a92b6c5cf497019ce7d1ea797cb70f00d02e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_AddEditUnitOwner : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<UnitOwnerModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/delete.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("unitOwnerForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("action", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
  
    ViewData["Title"] = "Add/Edit Unit Owner";

#line default
#line hidden
            BeginContext(104, 199, true);
            WriteLiteral("\n<!DOCTYPE html>\n\n<script type=\"text/javascript\">\n    var og = \'00000000-0000-0000-0000-000000000000\';\n    \n    $(document).ready\n        (function () {\n            checkSession();\n\n            if (\"");
            EndContext();
            BeginContext(304, 15, false);
#line 16 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
            Write(Model.OwnerGuid);

#line default
#line hidden
            EndContext();
            BeginContext(319, 69, true);
            WriteLiteral("\" != \"00000000-0000-0000-0000-000000000000\") {\n                og = \"");
            EndContext();
            BeginContext(389, 15, false);
#line 17 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
                 Write(Model.OwnerGuid);

#line default
#line hidden
            EndContext();
            BeginContext(404, 2824, true);
            WriteLiteral(@""";
                
            }

            loadBuildings();
            $('#subOwnerRequired').hide();
        });

    function loadBuildings() {
        $.ajax(
            {
                type: 'GET',
                url: '/Home/GetBuildingList',
                cache: false,
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: loadBuildingSuccess,
                error: loadBuildingsError()
            });
    }

    function loadBuildingsError() {


    }

    function loadBuildingSuccess(data) {
        $(""#comboBuildings"").igCombo({
            width: ""270px"",
            textKey: ""Name"",
            valueKey: ""BuildingGuid"",
            dataSource: data,
            dataSourceType: ""json"",
            filteringType: ""local"",
            autoComplete: true,
            placeHolder: ""Select a building..."",
            dropDownOrientation: ""bottom""
        });
        $(function () {
            $(""#titleName"").igTextEditor({
   ");
            WriteLiteral(@"             width: 260,
                readOnly: false,
                required: true,
                valdation: true,
                editorOptions: {
                    validatorOptions:
                    {
                        required: {
                            errorMessage: ""You must enter a title name to continue.""
                        }
                    }
                }
            });
        });
        $(""#comboBuildings"").on(""igcomboselectionchanged"", function (evt, ui) {
            var bg = $(""#comboBuildings"").igCombo(""value"");
            loadBuildingSelection(bg, true);
        });

        $(""#comboUnits"").igCombo();
        $('#unitOwnerForm').igValidator({
            onsubmit: true,
            successMessage: """",
            fields: [
                {
                    required: true,
                    selector: ""#titleName"",
                    onblur: true,
                    errorMessage: ""Unit owner must have a title name."",
                    notificatio");
            WriteLiteral(@"nOptions: {
                        mode: ""popover""
                    }
                },
                {
                    required: true,
                    selector: ""#comboBuildings"",
                    onblur: true,
                    errorMessage: ""You must select a building."",
                    notificationOptions: {
                        mode: ""popover""
                    }
                },
                {
                    required: true,
                    selector: ""#comboUnits"",
                    onblur: true,
                    errorMessage: ""You must select a unit."",
                    notificationOptions: {
                        mode: ""popover""
                    }
                }
            ]
        });

        if (""");
            EndContext();
            BeginContext(3229, 15, false);
#line 111 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
        Write(Model.OwnerGuid);

#line default
#line hidden
            EndContext();
            BeginContext(3244, 99, true);
            WriteLiteral("\" !== \"00000000-0000-0000-0000-000000000000\") {\n            $(\"#titleName\").igTextEditor(\"value\", \"");
            EndContext();
            BeginContext(3344, 15, false);
#line 112 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
                                              Write(Model.TitleName);

#line default
#line hidden
            EndContext();
            BeginContext(3359, 21, true);
            WriteLiteral("\");\n            if (\"");
            EndContext();
            BeginContext(3381, 18, false);
#line 113 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
            Write(Model.BuildingGuid);

#line default
#line hidden
            EndContext();
            BeginContext(3399, 103, true);
            WriteLiteral("\" !== \"00000000-0000-0000-0000-000000000000\") {\n                $(\"#comboBuildings\").igCombo(\"value\", \"");
            EndContext();
            BeginContext(3503, 18, false);
#line 114 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
                                                  Write(Model.BuildingGuid);

#line default
#line hidden
            EndContext();
            BeginContext(3521, 1521, true);
            WriteLiteral(@""");
                var bg = $(""#comboBuildings"").igCombo(""value"");
                loadBuildingSelection(bg, true);
            }
        }

        getSubOwners();
    }

    function loadBuildingSelection(bg, async) {
        $.ajax(
            {
                type: 'GET',
                async: async,
                url: '/Home/GetBuildingHeaderData',
                data: { buildingGuid: bg },
                dataType: ""json"",
                success: function (response) {
                    $.ajax(
                        {
                            type: 'GET',
                            async: true,
                            url: '/Home/GetUnitList',
                            data: { buildingGuid: bg },
                            dataType: ""json"",
                            success: function (response) {
                                getUnitList(response);
                            },
                            error: loadBuildingsError()
                        });
                ");
            WriteLiteral(@"},
                error: loadBuildingsError()
            });
    }

    function getUnitList(data) {
        $(""#comboUnits"").igCombo({
            width: ""270px"",
            textKey: ""unitcode"",
            valueKey: ""unitguid"",
            dataSource: jQuery.parseJSON(data),
            dataSourceType: ""json"",
            filteringType: ""local"",
            autoComplete: true,
            placeHolder: ""Select a unit..."",
            dropDownOrientation: ""bottom""
        });
        if (""");
            EndContext();
            BeginContext(5043, 14, false);
#line 161 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
        Write(Model.UnitGuid);

#line default
#line hidden
            EndContext();
            BeginContext(5057, 94, true);
            WriteLiteral("\" != \"00000000-0000-0000-0000-000000000000\") {\n            $(\"#comboUnits\").igCombo(\"value\", \"");
            EndContext();
            BeginContext(5152, 14, false);
#line 162 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditUnitOwner.cshtml"
                                          Write(Model.UnitGuid);

#line default
#line hidden
            EndContext();
            BeginContext(5166, 19159, true);
            WriteLiteral(@""");
        }
    }

    function getSubOwners() {

        $.ajax(
            {
                type: 'GET',
                url: '/Home/GetSubOwners',
                cache: false,
                data: { ownerGuid: og },
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: getSubOwnersSuccess,
                error: getSubOwnersFailure
            });
    }

    function getSubOwnersFailure() {
        // do nothing at this time
    }

    function getSubOwnersSuccess(data) {
        $(""#gridSubOwners"").igGrid({
            autoGenerateColumns: false,
            renderCheckboxes: true,
            primaryKey: ""SubOwnerGuid"",
            caption: ""Sub-Owners"",
            columns:
                [
                    { headerText: ""SubOwnerGuid"", key: ""SubOwnerGuid"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""ownerGuid"", key: ""OwnerGuid"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""F");
            WriteLiteral(@"irst Name"", key: ""FirstName"", dataType: ""string"", width: ""25%"" },
                    { headerText: ""Last Name"", key: ""LastName"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Address 1"", key: ""Address1"", dataType: ""string"", width: ""50%"" },
                    { headerText: ""Address 2"", key: ""Address2"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""City"", key: ""City"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""State"", key: ""State"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Zip Code"", key: ""ZipCode"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Zip Plus"", key: ""ZipPlus"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Phone 1"", key: ""Phone1"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Phone 2"", key: ""Phone2"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Fax"", key: ""Fax"", dataType: ""string"", width: ""20%"" ");
            WriteLiteral(@"},
                    { headerText: ""Email"", key: ""EmailAddress"", dataType: ""string"", width: ""20%"" }
                ],
            dataSource: jQuery.parseJSON(data),
            autofitLastColumn: true,
            dataSourceType: ""json"",
            responseDataKey: ""results"",
            width: ""100%"",
            tabIndex: 1,
            features: [
                {
                    name: ""Updating"",
                    locale: {
                        addRowLabel: ""Add new sub-owner..."",
                        rowEditDialogCaptionLabel: ""Add/Edit Sub-Owner""
                    },
                    enableAddRow: true,
                    enableUpdateRow: true,
                    enableDeleteRow: false,
                    startEditTriggers: ""click"",
                    editMode: ""dialog"",
                    columnSettings: [
                        {
                            columnKey: ""SubOwnerGuid"",
                            editorType: ""text"",
                            readOnly: true");
            WriteLiteral(@",
                            defaultValue: -1,
                            hidden: true
                        },
                        {
                            columnKey: ""OwnerGuid"",
                            editorType: ""text"",
                            readOnly: true,
                            hidden: true
                        },
                        {
                            columnKey: ""FirstName"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: true,
                            valdation: true,
                            editorOptions: {
                                validatorOptions:
                                {
                                    required: {
                                        errorMessage: ""You must enter a first name to continue.""
                                    }
                                }
                     ");
            WriteLiteral(@"       }
                        },
                        {
                            columnKey: ""LastName"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: true,
                            valdation: true,
                            editorOptions: {
                                validatorOptions:
                                {
                                    required: {
                                        errorMessage: ""You must enter a last name to continue.""
                                    }
                                }
                            }
                        },
                        {
                            columnKey: ""Address1"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        },
");
            WriteLiteral(@"                        {
                            columnKey: ""Address1"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        },
                        {
                            columnKey: ""City"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: true,
                            valdation: true,
                            editorOptions: {
                                validatorOptions:
                                {
                                    required: {
                                        errorMessage: ""You must enter a city to continue.""
                                    }
                                }
                            }
                        },
                        {
                   ");
            WriteLiteral(@"         columnKey: ""State"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: true,
                            valdation: true,
                            editorOptions: {
                                validatorOptions:
                                {
                                    required: {
                                        errorMessage: ""You must enter a state to continue.""
                                    }
                                }
                            }
                        },
                        {
                            columnKey: ""ZipCode"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: true,
                            validation: true,
                            editorOptions: {
                         ");
            WriteLiteral(@"       validatorOptions: {
                                    required: {
                                        errorMessage: ""You must enter a zip code to continue.""
                                    },
                                    pattern: {
                                        expression: /^[0-9]+$/,
                                        errorMessage: ""Zip code should be numeric.""
                                    },
                                    onblur: true,
                                    onchange: true
                                },
                            },
                        },
                        {
                            columnKey: ""ZipPlus"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false,
                            editorOptions: {
                                validatorOptions: {
                                 ");
            WriteLiteral(@"   pattern: {
                                        expression: /^[0-9]+$/,
                                        errorMessage: ""Zip plus should be numeric.""
                                    },
                                    onblur: true,
                                    onchange: true
                                },
                            },
                        },
                        {
                            columnKey: ""Phone1"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        },
                        {
                            columnKey: ""Phone2"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        },
                        {
                            columnKey: ");
            WriteLiteral(@"""Fax"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        },
                        {
                            columnKey: ""EmailAddress"",
                            editorType: ""text"",
                            readOnly: false,
                            hidden: false,
                            required: false
                        }
                    ],

                    rowEditDialogOptions: {
                        captionLabel: ""Add new sub-owner..."",
                        width: 700,
                        height: 600,
                        dialogTemplateSelector: ""#dialogTemplate"",
                        editorsTemplateSelector: ""#editorsTemplate"",
                        containment: ""ui"",
                        animationDuration: 400
                    }

                },
                {
                    name: 'Hiding'");
            WriteLiteral(@",
                    columnSettings:
                        [
                            {
                                columnKey: 'SubOwnerGuid',
                                allowHiding: false,
                                hidden: true
                            },
                            {
                                columnKey: 'OwnerGuid',
                                allowHiding: false,
                                hidden: true
                            },
                            {
                                columnKey: 'FirstName',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'LastName',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'Address1',
               ");
            WriteLiteral(@"                 allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'Address2',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'City',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'State',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'ZipCode',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                ");
            WriteLiteral(@"columnKey: 'ZipPlus',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'Phone1',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'Phone2',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'Fax',
                                allowHiding: false,
                                hidden: false
                            },
                            {
                                columnKey: 'EmailAddress',
                                allowHiding: false,
                                hidden: false
                            }

                      ");
            WriteLiteral(@"  ]
                }
            ]
        });
    }

    function saveUnitOwner() {
        if ($('#gridSubOwners').igGrid('option', 'dataSource').length == 0 && $('#gridSubOwners').igGrid('rows').length == 0) {
            $('#subOwnerRequired').show();
            return;
        }
        else {
            $('#subOwnerRequired').hide();
            var bg = '00000000-0000-0000-0000-000000000000';
            var ug = '00000000-0000-0000-0000-000000000000';
            var tn = '';

            tn = $(""#titleName"").igTextEditor(""value"");
            bg = $(""#comboBuildings"").igCombo(""value"");
            ug = $(""#comboUnits"").igCombo(""value"");

            $.ajax(
                {
                    async: false,
                    type: 'GET',
                    url: '/Home/SaveUnitOwner',
                    cache: false,
                    data: { ownerGuid: og, titleName: tn, buildingGuid: bg, unitGuid: ug },
                    dataType: ""json"",
                    contentType: ""application/jso");
            WriteLiteral(@"n; charset=utf-8"",
                    success: function (response) {
                        response = jQuery.parseJSON(response);
                        if (saveSubOwners(response[0].ownerGuid)) {
                            og = '00000000-0000-0000-0000-000000000000';
                            window.location.href = location.protocol + '//' + location.host + location.pathname;
                        }
                    },
                    error: function (jqXHR, exception) {
                        alert(jqXHR);
                        alert(exception);
                        return false;
                    }
                });
        }
    }

    function saveSubOwners(og) {
        var so = '00000000-0000-0000-0000-000000000000';
        var fn = '';
        var ln = '';
        var a1 = '';
        var a2 = '';
        var cy = '';
        var st = '';
        var zc = '';
        var zp = '';
        var p1 = '';
        var p2 = '';
        var fx = '';
        var ea = '';

        var");
            WriteLiteral(@" $grid = $(""#gridSubOwners"");
        var rows = $grid.igGrid(""allRows"");
        var rowId;

        $.each(rows, function (index, row) {
            rowId = $(row).attr(""data-id"");
            so = $grid.igGrid(""getCellValue"", rowId, ""SubOwnerGuid"");
            fn = $grid.igGrid(""getCellValue"", rowId, ""FirstName"");
            ln = $grid.igGrid(""getCellValue"", rowId, ""LastName"");
            a1 = $grid.igGrid(""getCellValue"", rowId, ""Address1"");
            a2 = $grid.igGrid(""getCellValue"", rowId, ""Address2"");
            cy = $grid.igGrid(""getCellValue"", rowId, ""City"");
            st = $grid.igGrid(""getCellValue"", rowId, ""State"");
            zc = $grid.igGrid(""getCellValue"", rowId, ""ZipCode"");
            zp = $grid.igGrid(""getCellValue"", rowId, ""ZipPlus"");
            p1 = $grid.igGrid(""getCellValue"", rowId, ""Phone1"");
            p2 = $grid.igGrid(""getCellValue"", rowId, ""Phone2"");
            fx = $grid.igGrid(""getCellValue"", rowId, ""Fax"");
            ea = $grid.igGrid(""getCellValue"", rowId, ""EmailAdd");
            WriteLiteral(@"ress"");

            $.post('/Home/SaveUnitSubOwner', {
                subOwnerGuid: so, ownerGuid: og, firstName: fn, lastName: ln, address1: a1, address2: a2, city: cy,
                state: st, zipCode: zc, zipPlus: zp, phone1: p1, phone2: p2, fax: fx, emailAddress: ea
            })
                .done(function () { })
                .fail(function (xhr, status, error) {
                    console.log(xhr);
                    console.log(status);
                    console.log(error);
                    return false;
                });
        });
            //.fail(function () {
            //    console.log(""error"");
            //});
        
             

            //$.ajax(
            //    {
            //        async: false,
            //        type: 'POST',
            //        url: '/Home/SaveUnitSubOwner',
            //        cache: false,
            //        data: {
            //            subOwnerGuid: so, ownerGuid: og, firstName: fn, lastName: ln, address1: a1, addre");
            WriteLiteral(@"ss2: a2, city: cy,
            //            state: st, zipCode: zc, zipPlus: zp, phone1: p1, phone2: p2, fax: fx, emailAddress: ea
            //        },
            //        dataType: ""json"",
            //        contentType: 'application/json; charset=UTF-8',
            //        success: function () {
            //        },
            //        error: function (jqXHR, exception) {
            //            console.log(jqXHR);
            //            console.log(exception);
            //            //$.ajax(
            //            //    {
            //            //        async: false,
            //            //        type: 'POST',
            //            //        url: '/Home/EmailError',
            //            //        cache: false,
            //            //        contentType: ""application/json; charset=utf-8""
            //            //    });
            //            return false;
            //        }
            //    });

        //});
        return true;

    }

</");
            WriteLiteral(@"script>

<script id=""dialogTemplate"" type=""text/html"">
    <div style=""float: left; width: 100%"">
        <strong>${Name}</strong><br />
        <table style=""width: 100%;"">
            <colgroup>
                <col style=""width: 30%;"" />
                <col style=""width: 200%;"" />
            </colgroup>
            <tbody data-render-tmpl=""true""></tbody>
        </table>
    </div>
</script>

<script id=""editorsTemplate"" type=""text/html"">
    <tr>
        <td style=""color: black;"">${headerText}</td>
        <td>
            <input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" />
        </td>
    </tr>
</script>

<meta name=""viewport"" content=""width=device-width"" />
<title>UnitOwners</title>
");
            EndContext();
            BeginContext(24325, 1412, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "45562b8c69c472724f101123c1b3eb5f87ddab0833567", async() => {
                BeginContext(24374, 736, true);
                WriteLiteral(@"
    <table style=""width: 100%"">
        <tr><td><h4>Title Name:</h4></td>
        <td rowspan=""3""> <table>
              <tr><td></td></tr>
              </table></td></tr>
        <tr>
            <td>
                <input id=""titleName"" style=""color: black;"">
            </td>
        </tr>
        
        <tr><td><h4>Building:</h4></td></tr>
        <tr>
            <td>
                <div id=""comboBuildings""></div>
            </td>
        </tr>
        <tr><td><h4>Unit:</h4></td></tr>
        <tr>
            <td>
                <div id=""comboUnits""></div>
            </td>
        </tr>
        <tr>
            <td colspan=""3"">
                <div id=""subOwnerRequired"" style=""color: red; align-content: center;"">");
                EndContext();
                BeginContext(25110, 33, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "45562b8c69c472724f101123c1b3eb5f87ddab0834706", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(25143, 587, true);
                WriteLiteral(@"<b>You must specify at least one sub-owner to continue.</b></div>
            </td>
        </tr>
        <tr>
            <td colspan=""3"">
                <div id=""gridSubOwners""></div>
            </td>
        </tr>
        <tr style=""padding-top: 10px"">
            <td colspan=""3"" align=""right"" style=""padding-top: 10px"">
                <button id=""buttonLogin"" type=""button"" class=""btn btn-default"" onclick=""saveUnitOwner()"">
                    <span class=""glyphicon glyphicon-save""></span> Save Unit Owner
                </button>
            </td>
        </tr>
    </table>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(25737, 2, true);
            WriteLiteral("\n\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<UnitOwnerModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
