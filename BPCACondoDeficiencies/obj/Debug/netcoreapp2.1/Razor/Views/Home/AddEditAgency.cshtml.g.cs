#pragma checksum "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditAgency.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e0137d8c5000df14f4870d4f9af55bdcc7255b95"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_AddEditAgency), @"mvc.1.0.view", @"/Views/Home/AddEditAgency.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/AddEditAgency.cshtml", typeof(AspNetCore.Views_Home_AddEditAgency))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#line 2 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0137d8c5000df14f4870d4f9af55bdcc7255b95", @"/Views/Home/AddEditAgency.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7ea6a92b6c5cf497019ce7d1ea797cb70f00d02e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_AddEditAgency : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\USER\Downloads\BPCAGit2024-main\BPCAGit2024-main\BPCACondoDeficiencies\Views\Home\AddEditAgency.cshtml"
  
    ViewData["Title"] = "Add/Edit Agency";

#line default
#line hidden
            BeginContext(48, 11684, true);
            WriteLiteral(@"
<script>
    $(document).ready
        (function () {
            checkSession();
            checkAdmin();
            loadAgencies();
        });

    function loadAgencies() {
        $.ajax(
            {
                type: 'GET',
                url: '/Home/GetAgencies',
                cache: false,
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: successCallback,
                error: errorCallback()
            });
    };

    function successCallback(data) {

        $(""#agencyList"").igGrid({
            autoGenerateColumns: false,
            renderCheckboxes: false,
            primaryKey: ""AgencyGuid"",
            caption: ""Agencies"",
            columns:
                [
                    { headerText: ""AgencyGuid"", key: ""AgencyGuid"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""Agency Code"", key: ""AgencyCode"", dataType: ""string"", width: ""7%"" },
                    { headerText: ""Agency"", ke");
            WriteLiteral(@"y: ""AgencyName"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Address 1"", key: ""Add1"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Address 2"", key: ""Add2"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""City"", key: ""City"", dataType: ""string"", width: ""10%"" },
                    { headerText: ""State"", key: ""State"", dataType: ""string"", width: ""10%"" },
                    { headerText: ""Zip Code"", key: ""Zip"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""Contact"", key: ""Contact"", dataType: ""string"", width: ""10%"" },
                    { headerText: ""Phone"", key: ""Phone"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""Fax"", key: ""Fax"", dataType: ""string"", width: ""0%"" },
                    {
                        headerText: """",
                        key: ""Delete"",
                        unbound: true,
                        template: ""<input type='image' src='/images/delete.png' onclic");
            WriteLiteral(@"k='deleteAgency(${AgencyGuid})' />"",
                        width: ""5%"",
                        columnCssClass: ""deleteAlign""
                    }
                ],
            dataSource: data,
            autofitLastColumn: false,
            dataSourceType: ""json"",
            responseDataKey: ""results"",
            width: ""100%"",
            tabIndex: 1,
            features: [
                {
                    name: ""Selection"",
                    mode: ""row"",
                    multipleSelection: false
                },
                {
                    name: ""Sorting""
                },
                {
                    name: ""Updating"",
                    locale: {
                        addRowLabel: ""Add new agency..."",
                        rowEditDialogCaptionLabel: ""Add/Edit Agency""
                    },
                    enableAddRow: true,
                    enableUpdateRow: true,
                    enableDeleteRow: false,
                    editRowEnding: function (");
            WriteLiteral(@"evt, ui) {
                        var an = ui.values['AgencyName'];
                        var ac = ui.values['AgencyCode'];
                        var add1 = ui.values['Add1'];
                        var add2 = ui.values['Add2'];
                        var ct = ui.values['City'];
                        var st = ui.values['State'];
                        var zip = ui.values['Zip'];
                        var cn = ui.values['Contact'];
                        var ph = ui.values['Phone'];
                        var fx = ui.values['Fax'];

                        if (ui.update == true && ui.rowAdding == false) {
                            var ag = ui.rowID;
                            $.ajax(
                                {
                                    async: false,
                                    type: 'POST',
                                    url: '/Home/UpdateAgency',
                                    cache: false,
                                    data: {
                        ");
            WriteLiteral(@"                agencyGuid: ag, agencyCode: ac, agencyName: an, address1: add1, address2: add2,
                                        city: ct, state: st, zip: zip, contact: cn, phone: ph, fax: fx
                                    },
                                    dataType: ""json"",
                                    success: function()
                                    { },
                                    error: function ()
                                    { }
                                });
                        }
                        if (ui.update == true && ui.rowAdding == true) {
                            $.ajax(
                                {
                                    async: false,
                                    type: 'POST',
                                    url: '/Home/InsertAgency',
                                    cache: false,
                                    data: {
                                        agencyCode: ac, agencyName: an, addres");
            WriteLiteral(@"s1: add1, address2: add2,
                                        city: ct, state: st, zip: zip, contact: cn, phone: ph, fax: fx
                                    },
                                    dataType: ""json"",
                                    success: function () { },
                                    error: function () { }
                                });
                        }

                        loadAgencies();
                    },
                    columnSettings: [
                        {
                            columnKey: ""Delete"",
                            readOnly: true
                        },
                    ],
                    startEditTriggers: ""click"",
                    editMode: ""dialog"",
                    rowEditDialogOptions: {
                        width: 700,
                        height: 700,
                        dialogTemplateSelector: ""#dialogTemplate"",
                        editorsTemplateSelector: ""#editorsTemplate"",
        ");
            WriteLiteral(@"                containment: ""ui"",
                        animationDuration: 400,
                        showReadonlyEditors: false
                    },
                },
                {
                    name: 'Hiding',
                    columnSettings:
                        [
                            {
                                columnKey: ""AgencyGuid"",
                                allowHiding: false,
                                editorType: ""text"",
                                readOnly: true,
                                defaultValue: -1,
                                hidden: true
                            },
                            {
                                columnKey: ""AgencyCode"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: false,
                                defaultValue: '',
                                hidden: false,
                              ");
            WriteLiteral(@"  required: true
                            },
                            {
                                columnKey: ""AgencyName"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: '',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""Add1"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: '',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""Add2"",
                                editorType: ""text"",
                     ");
            WriteLiteral(@"           allowHiding: false,
                                readOnly: true,
                                defaultValue: '',
                                hidden: false,
                                required: false
                            },
                            {
                                columnKey: ""City"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: 'New York',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""State"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: 'NY',
                                hidden: false,
                    ");
            WriteLiteral(@"            required: true
                            },
                            {
                                columnKey: ""Zip"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: '',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""Contact"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: false,
                                defaultValue: '',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""Phone"",
                                editorType: ""text"",
             ");
            WriteLiteral(@"                   allowHiding: false,
                                readOnly: true,
                                defaultValue: '555-555-5555',
                                hidden: false,
                                required: true
                            },
                            {
                                columnKey: ""Fax"",
                                editorType: ""text"",
                                allowHiding: false,
                                readOnly: true,
                                defaultValue: '',
                                hidden: false,
                                required: false
                            }
                        ]
                }
            ]

        });
    };

    function errorCallback() {
    };

    function deleteAgency(agencyGuid) {
        $.ajax(
            {
                async: true,
                type: 'POST',
                url: '/Home/DeleteAgency',
                data: { agencyGuid: agencyGuid },
   ");
            WriteLiteral(@"             cache: false,
                success: function () {
                    loadAgencies();
                }
            });
    }
</script>

<style>
    td.edge {
        width: 17%;
        vertical-align: top;
    }

    #agencyList tr td {
        white-space: nowrap;
    }

    input:hover {
        color: initial;
    }

    .deleteAlign {
        text-align: right !important;
    }
</style>

<html>
");
            EndContext();
            BeginContext(11732, 794, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e0137d8c5000df14f4870d4f9af55bdcc7255b9515973", async() => {
                BeginContext(11738, 781, true);
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <title>Add/Edit Agency</title>
    <script id=""dialogTemplate"" type=""text/html"">
        <div style=""float: left; width: 100%"">
            <strong>${Name}</strong><br />
            <table style=""width: 100%;"">
                <colgroup>
                    <col style=""width: 30%;"" />
                    <col style=""width: 200%;"" />
                </colgroup>
                <tbody data-render-tmpl=""true""></tbody>
            </table>
        </div>
    </script>

    <script id=""editorsTemplate"" type=""text/html"">
        <tr>
            <td style=""color: black;"">${headerText}</td>
            <td><input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" /></td>
        </tr>
    </script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12526, 1, true);
            WriteLiteral("\n");
            EndContext();
            BeginContext(12527, 123, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e0137d8c5000df14f4870d4f9af55bdcc7255b9517967", async() => {
                BeginContext(12533, 110, true);
                WriteLiteral("\n\n    <div class=\"page-content\" style=\"padding-top:40px;\">\n        <table id=\"agencyList\"></table>\n    </div>\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(12650, 9, true);
            WriteLiteral("\n</html>\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
