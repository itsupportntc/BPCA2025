#pragma checksum "C:\Users\wreye\Documents\Redsoft\BPCA\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\UnitInquiry.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ec40604bc9713e2845d12cab20c65389dd1a7bb7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_UnitInquiry), @"mvc.1.0.view", @"/Views/Home/UnitInquiry.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\wreye\Documents\Redsoft\BPCA\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\wreye\Documents\Redsoft\BPCA\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ec40604bc9713e2845d12cab20c65389dd1a7bb7", @"/Views/Home/UnitInquiry.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b8fbd9faa897a3de153447734863bc8f11e1a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_UnitInquiry : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\wreye\Documents\Redsoft\BPCA\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\UnitInquiry.cshtml"
  
    ViewData["Title"] = "Unit Inquiry"; 

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<!DOCTYPE html>
<style id=""historyGrid"">
    .headerCss {
        text-align: right !important;
    }

    .colCss {
        text-align: right !important;
    }
    
</style>
<script type=""text/javascript"">
    var ug = '00000000-0000-0000-0000-000000000000';
    var agencyCode;
    var isAdminUser;

    $(document).ready
        (function () {
            checkSession();
            loadUserSettings();
            loadBuildings();
            $(function () {
                $(""#dateTimeWorksheetDate"").igDatePicker({
                    width: ""270px"",
                    dateInputFormat: ""date"",
                    regional: ""en-US"",
                    required: true,
                    nullText: ""Please select an invoice date..."",
                    datepickerOptions: {
                        showWeek: false,
                        numberOfMonths: [1, 2]
                    }
                });
            });
        });

    function loadUserSettings() {
      ");
            WriteLiteral(@"  $.ajax(
            {
                async: true,
                type: 'GET',
                url: '/Home/GetUserAgencyCode',
                contentType: ""text/html"",
                cache: false,
                success: function (data) {
                    agencyCode = data;
                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR);
                    console.log(exception);
                    return false;
                }
            }
        );
    }

    function loadBuildings() {
        $.ajax(
            {
                type: 'GET',
                url: '/Home/GetBuildingList',
                cache: false,
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: loadBuildingSuccess,
                error: loadBuildingsError()
            });
    }

    function loadBuildingsError() {


    }

    function loadBuildingSuccess(data) {");
            WriteLiteral(@"
        $(""#comboBuildings"").igCombo({
            width: ""270px"",
            textKey: ""Name"",
            valueKey: ""BuildingGuid"",
            dataSource: data,
            dataSourceType: ""json"",
            filteringType: ""local"",
            autoComplete: true,
            placeHolder: ""Select a building..."",
            dropDownOrientation: ""bottom""
        });
        $(""#comboBuildings"").on(""igcomboselectionchanged"", function (evt, ui) {
            var bg = $(""#comboBuildings"").igCombo(""value"");
            loadBuildingSelection(bg, true);
        });
    }

    function loadBuildingSelection(bg, async) {
        $.ajax(
        {
            type: 'GET',
            async: async,
            url: '/Home/GetBuildingHeaderData',
            data: { buildingGuid: bg },
            dataType: ""json"",
            success: function (response) {
                $.ajax(
                    {
                        type: 'GET',
                        async: true,
            ");
            WriteLiteral(@"            url: '/Home/GetUnitList',
                        data: { buildingGuid: bg },
                        dataType: ""json"",
                        success: function (response) {
                            getUnitList(response);
                        },
                        error: loadBuildingsError()
                    });
            },
            error: loadBuildingsError()
        });
    }

    function getUnitList(data) {
        $(""#comboUnits"").igCombo({
            width: ""270px"",
            textKey: ""unitcode"",
            valueKey: ""unitguid"",
            dataSource: jQuery.parseJSON(data),
            dataSourceType: ""json"",
            filteringType: ""local"",
            autoComplete: true,
            placeHolder: ""Select a unit..."",
            dropDownOrientation: ""bottom""
        });
        $(""#comboUnits"").on(""igcomboselectionchanged"", function (evt, ui) {
            loadUnitInquiry();
        });
    }

    function loadUnitInquiry() {
     ");
            WriteLiteral(@"   var ug = $(""#comboUnits"").igCombo(""value"");

        $.ajax(
            {
                type: 'GET',
                async: true,
                url: '/Home/GetUnitInquiry',
                data: { unitGuid: ug },
                dataType: ""json"",
                success: function (response) {
                    displayCurrentDefaults(jQuery.parseJSON(response).Table);
                    displayCurrentDefaultTotals(jQuery.parseJSON(response).Table1);
                    displayTransactionHistory(jQuery.parseJSON(response).Table2);
                    displayPaymentHistory(jQuery.parseJSON(response).Table3);
                    
                },
                error: loadUnitInquiryError()
            });
    }

    function loadUnitInquiryError() { }

    function displayCurrentDefaults(data) {
        $(""#gridCurrentDefaults"").igGrid({
            autoGenerateColumns: false,
            renderCheckboxes: true,
            primaryKey: ""Default Date"",
            caption:");
            WriteLiteral(@" """",
            columns:
                [
                    { headerText: ""Default Date"", key: ""Default Date"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Base Rent"", key: ""baserent"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Civic Facilities"", key: ""civic"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Supplemental Rent"", key: ""supplemental"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""PILOT"", key: ""pilot"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" }
                ],
            dataSource: data,
            autofitLastColumn: false,
            dataSourceType: ""json"",
            responseDataKey: """);
            WriteLiteral(@"results"",
            width: ""100%"",
            tabIndex: 1
        });
    }

    function displayCurrentDefaultTotals(data) {
        $(""#gridCurrentDefaultTotals"").igGrid({
            autoGenerateColumns: false,
            renderCheckboxes: true,
            primaryKey: ""Totals"",
            caption: """",
            columns:
                [
                    { headerText: ""Totals"", key: ""totals"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Base Rent"", key: ""baserent"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Civic Facilities"", key: ""civic"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Supplemental Rent"", key: ""supplemental"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                   ");
            WriteLiteral(@" { headerText: ""PILOT"", key: ""pilot"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" }
                ],
            dataSource: data,
            autofitLastColumn: false,
            dataSourceType: ""json"",
            responseDataKey: ""results"",
            width: ""100%"",
            tabIndex: 1
        });
    }

    function displayTransactionHistory(data) {
        $(""#gridTransactionHistory"").igGrid({
            autoGenerateColumns: false,
            renderCheckboxes: true,
            primaryKey: ""Totals"",
            columns:
                [
                    { headerText: ""trxid"", key: ""trxid"", dataType: ""string"", width: ""0%"" },
                    { headerText: ""Type"", key: ""Transaction Type"", dataType: ""string"", width: ""20%"" },
                    { headerText: ""Date"", key: ""Transaction Date"", dataType: ""string"", width: ""10%"", format: ""date"" },
                    { headerText: ""Base Rent"", key: ""Base Rent"", d");
            WriteLiteral(@"ataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Supplemental Rent"", key: ""Supplemental Rent"", dataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Civic Facilities"", key: ""Civic Facilities"", dataType: ""string"", width: ""10%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""PILOT"", key: ""PILOT"", dataType: ""string"", width: ""10%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                    { headerText: ""Total"", key: ""Total"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" }
                ],
            dataSource: data,
            autofitLastColumn: false,
            dataSourceType: ""json"",
            responseDataKey: ""results"",
            width: ""100%");
            WriteLiteral(@""",
            tabIndex: 1
        });
    }

    function displayPaymentHistory(data) {
        if (agencyCode.toString() === ""RED"" || agencyCode.toString() === ""AUTH"") {
            $(""#gridPaymentHistory"").igGrid({
                autoGenerateColumns: false,
                renderCheckboxes: true,
                primaryKey: ""Totals"",
                columns:
                    [
                        { headerText: ""trxid"", key: ""trxid"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Default Date"", key: ""DefaultDate"", dataType: ""string"", width: ""10%"", format: ""date"" },
                        { headerText: ""Base Rent"", key: ""baserent"", dataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""Civic Facilities"", key: ""civic"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText");
            WriteLiteral(@": ""Supplemental Rent"", key: ""supplemental"", dataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""PILOT"", key: ""pilot"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""Date Paid"", key: ""paiddate"", dataType: ""string"", width: ""15%"", format: ""date"" },
                        { headerText: """", key: ""paydeleteimage"", dataType: ""string"", width: ""0%"" },
                        { headerText: """", key: ""paymentdeleted"", dataType: ""string"", width: ""0%"" },
                        { headerText: """", key: ""totalpaid"", dataType: ""string"", width: ""0%"" },
                        { headerText: """", key: ""paymenttrxid"", dataType: ""string"", width: ""0%"" },
                        {
                            headerText: """",
                            key: ""Delete"",
                            unbound: true,
                 ");
            WriteLiteral(@"           template: ""<input type='image' src='${paydeleteimage}' onclick='deletePayment(${paymenttrxid}, ${paymentdeleted}, ${totalpaid})' />"",
                            width: ""5%"",
                            columnCssClass: ""deleteAlign""
                        }
                    ],
                dataSource: data,
                autofitLastColumn: false,
                dataSourceType: ""json"",
                responseDataKey: ""results"",
                width: ""100%"",
                tabIndex: 1
            });
        }
        else {
            $(""#gridPaymentHistory"").igGrid({
                autoGenerateColumns: false,
                renderCheckboxes: true,
                primaryKey: ""Totals"",
                columns:
                    [
                        { headerText: ""trxid"", key: ""trxid"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Default Date"", key: ""DefaultDate"", dataType: ""string"", width: ""10%"", format: ""date"" },
            ");
            WriteLiteral(@"            { headerText: ""Base Rent"", key: ""baserent"", dataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""Civic Facilities"", key: ""civic"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""Supplemental Rent"", key: ""supplemental"", dataType: ""string"", width: ""15%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""PILOT"", key: ""pilot"", dataType: ""string"", width: ""20%"", format: ""currency"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"" },
                        { headerText: ""Date Paid"", key: ""paiddate"", dataType: ""string"", width: ""15%"", format: ""date"" },
                        { headerText: """", key: ""paydeleteimage"", dataType: ""string"", width: ""0%"" },
                        { headerText: """", key: ""paymentdeleted"", dataType: ""string"", ");
            WriteLiteral(@"width: ""0%"" },
                        { headerText: """", key: ""totalpaid"", dataType: ""string"", width: ""0%"" },
                        { headerText: """", key: ""paymenttrxid"", dataType: ""string"", width: ""0%"" }
                    ],
                dataSource: data,
                autofitLastColumn: false,
                dataSourceType: ""json"",
                responseDataKey: ""results"",
                width: ""100%"",
                tabIndex: 1
            });
        }
    }

    function deletePayment(trxId, del, pd) {
        if (del === false) {
            showSelectWorksheetDate(trxId, pd);
        }
        else {
            $.ajax(
            {
                async: true,
                type: 'POST',
                url: '/Home/ReinstatePayment',
                data: { trxId: trxId },
                cache: false,
                success: function () {
                    loadUnitInquiry();
                }
            });
        }
    }

    function showSelect");
            WriteLiteral(@"WorksheetDate(trxId, pd) {
        var idt;
        $(""#selectWorksheetDateDialog"").dialog({
            title: 'Select Worksheet Date',
            resizable: false,
            height: 300,
            width: 350,
            show: { effect: 'drop', direction: ""up"" },
            modal: true,
            draggable: true,
            open: function (event, ui) {
                $("".ui-dialog-titlebar-close"").hide();
            },
            buttons: {
                ""Yes"": function () {
                    var objDate = $(""#dateTimeWorksheetDate"").igDatePicker(""value"");
                    if (objDate.getDate() !== ""1"") {
                        idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
                        $(""#dateTimeWorksheetDate"").igDatePicker(""value"", idt);
                    }
                    else {
                        idt = (objDate.getMonth() + 1) + ""/1/"" + objDate.getFullYear();
                    }
                    $.ajax(
           ");
            WriteLiteral(@"             {
                            async: true,
                            type: 'POST',
                            url: '/Home/DeletePayment',
                            data: { trxId: trxId, worksheetDate: idt, paidAmt: pd },
                            cache: false,
                            success: function () {
                                loadUnitInquiry();
                            },
                            error: function (jqXHR, exception) {
                                if (jqXHR.responseText.includes('value NULL')) {
                                    document.getElementById('alertMessage').innerHTML = 'A worksheet with the specified date could not be found!';
                                    showErrorAlert('Worksheet Not Found!');
                                }
                            }
                        });
                    $(this).dialog(""close"");
                },
                ""No"": function () {
                    $(this).di");
            WriteLiteral(@"alog(""close"");
                }
            }
        });
    }

    function showErrorAlert(title) {
        $(""#errorMessage"").dialog({
            title: title,
            resizable: false,
            height: 250,
            width: 350,
            show: { effect: 'drop', direction: ""up"" },
            modal: true,
            draggable: false,
            open: function (event, ui) {
                $("".ui-dialog-titlebar-close"").hide();
            },
            buttons: {
                ""OK"": function () {
                    $(this).dialog(""close"");

                }
            }
        });

    }
</script>


<html>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec40604bc9713e2845d12cab20c65389dd1a7bb721818", async() => {
                WriteLiteral("\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>UnitInquiry</title>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ec40604bc9713e2845d12cab20c65389dd1a7bb722884", async() => {
                WriteLiteral(@"
    <style type=""text/css"">
        .deleteAlign {
            text-align: right !important;
        }

        .imagePad {
            padding-left: 5px;
        }

        .optionPad {
            padding-top: 20px;
        }
    </style>
    <table style=""width: 100%"">
        <tr><td><h4>Building:</h4></td></tr>
        <tr>
            <td>
                <div id=""comboBuildings""></div>
            </td>
        </tr>
        <tr><td><h4>Unit:</h4></td></tr>
        <tr>
            <td>
                <div id=""comboUnits""></div>
            </td>
        </tr>
    </table>
    <table style=""width: 100%"">
        <tr><td><h4>Current Defaults</h4></td></tr>
        <tr>
            <td>
                <div id=""gridCurrentDefaults""></div>
            </td>
        </tr>
        <tr>
            <td>
                <div id=""gridCurrentDefaultTotals""></div>
            </td>
        </tr>
    </table>
    <table style=""width: 100%"">
        <tr><td><h4>Transacti");
                WriteLiteral(@"on History</h4></td></tr>
        <tr>
            <td>
                <div id=""gridTransactionHistory""></div>
            </td>
        </tr>
    </table>
    <table style=""width: 100%"">
        <tr><td><h4>Payment History</h4></td></tr>
        <tr>
            <td>
                <div id=""gridPaymentHistory""></div>
            </td>
        </tr>
    </table>
    <table style=""padding-bottom: 155px;"">
        <tr><td></td></tr>
    </table>
    <div id=""errorMessage"" style=""display: none"">
        <p>
            <div id=""alertMessage""></div>
        </p>
    </div>
    <div id=""selectWorksheetDateDialog"" style=""display: none"">
        <p>
            <table>
                <tr>
                    <td align=""center"">Please specify the worksheet date to apply this payment reversal to.</td>
                </tr>
                <tr>
                    <td>
                        <div id=""dateTimeWorksheetDate""></div>
                    </td>
                </tr>
    ");
                WriteLiteral("        </table>\r\n        </p>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
