#pragma checksum "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "308f96ff9cf9a4b5d96125507f62843bf8fa9da8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_AddEditWorksheet), @"mvc.1.0.view", @"/Views/Home/AddEditWorksheet.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/AddEditWorksheet.cshtml", typeof(AspNetCore.Views_Home_AddEditWorksheet))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#line 2 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
#line 1 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
using Infragistics.Web.Mvc;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"308f96ff9cf9a4b5d96125507f62843bf8fa9da8", @"/Views/Home/AddEditWorksheet.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b8fbd9faa897a3de153447734863bc8f11e1a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_AddEditWorksheet : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<WorksheetModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/table_go.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/printer.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
  
    ViewData["Title"] = "Add/Edit Worksheet";

#line default
#line hidden
            BeginContext(107, 29, true);
            WriteLiteral("\r\n<!DOCTYPE html>\r\n\r\n<html>\r\n");
            EndContext();
            BeginContext(136, 27459, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "308f96ff9cf9a4b5d96125507f62843bf8fa9da84751", async() => {
                BeginContext(142, 738, true);
                WriteLiteral(@"
    <style type=""text/css"">
        .customTheme .ui-igedit-field {
            outline: 0;
            border: 0px;
        }

        #worksheetDetails tr td {
            white-space: nowrap;
        }
       
    </style>
    <meta name=""viewport"" content=""width=device-width"" />
    <title>AddEditWorksheet</title>
    <script>
        var bg;
        var idt;

        $(document).ready
            (function () {
                checkSession();

                loadInvoiceData();
            });
        function loadInvoiceData() {
            $.ajax(
                {
                    type: 'GET',
                    url: '/Home/GetWorksheetInvoice',
                    data: { invoiceGuid: '");
                EndContext();
                BeginContext(881, 17, false);
#line 39 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                     Write(Model.InvoiceGuid);

#line default
#line hidden
                EndContext();
                BeginContext(898, 3182, true);
                WriteLiteral(@"' },
                    cache: false,
                    async: true,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: getInvoiceDataSuccess,
                    error: getInvoiceDataFailure()
                }
            );
        }
        function getInvoiceDataSuccess(data) {
            console.log(data);
            var jres = JSON.parse(data);
            bg = jres[0].buildingguid;
            var bn = jres[0].buildingname;
            idt = jres[0].invoicedate;
            var br = jres[0].baserent;
            var sup = jres[0].suppl;
            var civ = jres[0].civic;
            var pil = jres[0].pilot;
            var cr = jres[0].credit;
            var to = jres[0].total;

            $(function () {
                $(""#buildingName"").igTextEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
");
                WriteLiteral(@"            });
            $(function () {
                $(""#invoiceDate"").igDateEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(function () {
                $(""#baserent"").igCurrencyEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(function () {
                $(""#supplemental"").igCurrencyEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(function () {
                $(""#civic"").igCurrencyEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(function () {
                $(""#pilot"").igCurrencyEditor({
          ");
                WriteLiteral(@"          width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(function () {
                $(""#total"").igCurrencyEditor({
                    width: 160,
                    readOnly: true,
                    theme: 'customTheme'
                });
            });
            $(""#buildingName"").igTextEditor(""value"", bn);
            $(""#invoiceDate"").igDateEditor(""value"", idt);
            $(""#baserent"").igCurrencyEditor(""value"", br);
            $(""#civic"").igCurrencyEditor(""value"", civ);
            $(""#supplemental"").igCurrencyEditor(""value"", sup);
            $(""#pilot"").igCurrencyEditor(""value"", pil);
            $(""#total"").igCurrencyEditor(""value"", to);

            getWorksheetDetails();
        }

        function getInvoiceDataFailure() {

        }

        function getWorksheetDetails() {
            $.ajax(
                {
                    async: true,
                    ");
                WriteLiteral("type: \'GET\',\r\n                    url: \'/Home/GetWorksheetDetails\',\r\n                    data: { worksheetId: ");
                EndContext();
                BeginContext(4081, 17, false);
#line 132 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                    Write(Model.WorksheetId);

#line default
#line hidden
                EndContext();
                BeginContext(4098, 4391, true);
                WriteLiteral(@" },
                    cache: false,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: getWorksheetDetailsSuccess,
                    error: getWorksheetDetailsError()
                }
            );
        }

        function getWorksheetDetailsSuccess(data) {
            $(""#worksheetDetails"").igGrid({

                autoGenerateColumns: false,
                renderCheckboxes: false,
                primaryKey: ""trxid"",
                caption: ""Defaults/Payments"",
                columns:
                    [
                        { headerText: ""trxid"", key: ""trxid"", dataType: ""number"", width: ""0%"" },
                        { headerText: ""Type"", key: ""TransType"", dataType: ""string"", width: ""25%"" },
                        { headerText: ""defpaid"", key: ""defpaid"", dataType: ""date"", width: ""0%"" },
                        { headerText: ""UnitG"", key: ""UnitGUID"", dataType: ""string"", width: ""0%"" }");
                WriteLiteral(@",
                        { headerText: ""Unit"", key: ""Unit"", dataType: ""string"", width: ""20%"" },
                        { headerText: ""ownerguid"", key: ""ownerguid"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Unit Owner"", key: ""Owner"", dataType: ""string"", width: ""30%"" },
                        { headerText: ""Base Rent"", key: ""BaseRent"", dataType: ""number"", width: ""15%"", format: ""currency"", columnCssClass: ""numericAlignment"" },
                        { headerText: ""Civic Facility"", key: ""CivicFacility"", dataType: ""number"", width: ""15%"", format: ""currency"", columnCssClass: ""numericAlignment"" },
                        { headerText: ""Supplemental"", key: ""Supplemental"", dataType: ""number"", width: ""15%"", format: ""currency"", columnCssClass: ""numericAlignment"" },
                        { headerText: ""PILOT"", key: ""PILOT"", dataType: ""number"", width: ""15%"", format: ""currency"", columnCssClass: ""numericAlignment"" },
                        { headerText: ""CommonInterest"", key: ""C");
                WriteLiteral(@"ommonInterest"", dataType: ""number"", width: ""0%"" },
                        {
                            headerText: """",
                            key: ""Delete"",
                            unbound: true,
                            template: ""<input type='image' src='/images/delete.png' onclick='deleteRow(${trxid})' />"",
                            width: ""5%"",
                            columnCssClass: ""deleteAlign"" 
                        }
                    ],
                features: [
                    {
                        name: ""Selection"",
                        mode: ""row"",
                        multipleSelection: false
                    },
                    {
                        name: ""Sorting"",
                        type: ""local"",
                        mode: ""single"",
                        persist: false
                    },
                    {
                        name: ""Updating"",
                        locale: {
                    ");
                WriteLiteral(@"        addRowLabel: ""Add default/payment..."",
                            rowEditDialogCaptionLabel: ""Add Default/Payment""
                        },
                        enableAddRow: true,
                        enableUpdateRow: false,
                        enableDeleteRow: false,
                        rowEditDialogBeforeClose: function (evt, ui) {
                            if (evt.currentTarget.id != ""worksheetDetails_updating_dialog_container_footer_buttonok"") {
                                return;
                            }
                            var unitGuid = $(""#unit"").igCombo(""value"");
                            var ownerGuid = $(""#owner"").igCombo(""value"");
                            var transType = $(""#transactionType"").igCombo(""value"");
                            var numPayments = document.getElementById(""numberOfPayments"").value;

                            
                            if (transType == ""D"") {
                                $.ajax(
     ");
                WriteLiteral(@"                           {
                                    async: true,
                                    type: 'POST',
                                    url: '/Home/InsertDefault',
                                    data: { unitGuid: unitGuid, ownerGuid: ownerGuid, worksheetId: ");
                EndContext();
                BeginContext(8490, 17, false);
#line 209 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                                                                              Write(Model.WorksheetId);

#line default
#line hidden
                EndContext();
                BeginContext(8507, 669, true);
                WriteLiteral(@" },
                                    cache: false,
                                    success: function (data) {
                                        getWorksheetDetails();
                                    }
                                });
                            }
                            else {
                                $.ajax(
                                {
                                    async: true,
                                    type: 'POST',
                                    url: '/Home/InsertPayments',
                                    data: { unitGuid: unitGuid, ownerGuid: ownerGuid, worksheetId: ");
                EndContext();
                BeginContext(9177, 17, false);
#line 222 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                                                                              Write(Model.WorksheetId);

#line default
#line hidden
                EndContext();
                BeginContext(9194, 9536, true);
                WriteLiteral(@", numPayments: numPayments },
                                    cache: false,
                                    success: function (data) {
                                        getWorksheetDetails();
                                    }
                                });
                            }
                        },
                        startEditTriggers: ""click"",
                        editMode: ""dialog"",
                        columnSettings:
                            [
                                {
                                    columnKey: 'UnitGUID',
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: true
                                },
                                {
                                    columnKey: 'trxid',
                  ");
                WriteLiteral(@"                  editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'Unit',
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'Delete',
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                ");
                WriteLiteral(@"    required: false
                                },
                                {
                                    columnKey: 'Owner',
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'TransType',
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'BaseRent',
                                    hidden: true,
                       ");
                WriteLiteral(@"             editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'CivicFacility',
                                    hidden: true,
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'Supplemental',
                                    hidden: true,
                                    editorType: ""text"",
                                    readOnly: true,
                          ");
                WriteLiteral(@"          defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'PILOT',
                                    hidden: true,
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    required: false
                                },
                                {
                                    columnKey: 'CommonInterest',
                                    hidden: true,
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1,
                                    hidden: true,
                                    req");
                WriteLiteral(@"uired: false
                                }
                            ],
                        rowEditDialogOptions: {
                            captionLabel: ""CaptionLabel"",
                            width: 600,
                            height: 500,
                            dialogTemplateSelector: ""#dialogTemplate"",
                            editorsTemplateSelector: ""#editorsTemplate"",
                            containment: ""ui"",
                            animationDuration: 400,
                            showReadonlyEditors: false
                        }
                        
                    },
                    {
                        name: 'Hiding',
                        columnSettings:
                            [
                                {
                                    columnKey: 'TransType',
                                    allowHiding: false,
                                    hidden: false
                                ");
                WriteLiteral(@"},
                                {
                                    columnKey: 'defpaid',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'Unit',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'ownerguid',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'Owner',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    co");
                WriteLiteral(@"lumnKey: 'BaseRent',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'CivicFacility',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'Supplemental',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'PILOT',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'CommonInterest',
                                  ");
                WriteLiteral(@"  allowHiding: false,
                                    hidden: false
                                }, {
                                    columnKey: 'Delete',
                                    allowHiding: false,
                                    hidden: false
                                }
                            ]
                    }],
                dataSource: data,
                dataSourceType: ""json"",
                responseDataKey: ""results"",
                height: ""1000"",
                width: ""100%"",
                tabIndex: 1,

            });
            $(""#worksheetDetails"").on(""iggridupdatingroweditdialogafteropen"",
                function (event, ui) {
                    document.getElementById(""labelNP"").style.display = ""none"";
                    document.getElementById(""inputNP"").style.display = ""none"";
                    document.getElementById(""labelCMD"").style.display = ""none"";
                    document.getElementById(""inputCMD"").styl");
                WriteLiteral(@"e.display = ""none"";
                    var diaElem = ui.dialogElement;
                    $.ajax(
                        {
                            async: true,
                            type: 'GET',
                            url: '/Home/GetUnitList',
                            data: { buildingGuid: """);
                EndContext();
                BeginContext(18731, 18, false);
#line 420 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                              Write(Model.BuildingGuid);

#line default
#line hidden
                EndContext();
                BeginContext(18749, 6715, true);
                WriteLiteral(@""" },
                            cache: false,
                            dataType: ""json"",
                            contentType: ""application/json; charset=utf-8"",
                            success: function (response) {
                                  $(""#unit"").igCombo({
                                      dataSource: jQuery.parseJSON(response),
                                      valueKey: ""unitguid"",
                                      textKey: ""unitcode"",
                                      dataType: ""json"",
                                      selectionChanged: function (evt, ui) {
                                          var unitGuid = $(""#unit"").igCombo(""value"");
                                          var unitCode = $(""#unit"").igCombo(""text"");
                                          $.ajax(
                                            {
                                                async: true,
                                                type: 'GET',
     ");
                WriteLiteral(@"                                           url: '/Home/GetUnitOwner',
                                                data: { unitGuid: unitGuid },
                                                cache: false,
                                                dataType: ""json"",
                                                contentType: ""application/json; charset=utf-8"",
                                                  success: function (response) {
                                                      var ownerJson = jQuery.parseJSON(response);
                                                      $(""#owner"").igCombo({
                                                          initialSelectedItems: [
                                                              { value: ownerJson[0].ownerguid }
                                                          ],
                                                        dataSource: ownerJson,
                                                        valueKey: """);
                WriteLiteral(@"ownerguid"",
                                                        textKey: ""titlename"",
                                                        dataType: ""json"",
                                                          selectionChanged: function (evt, ui) {
                                                              showMonthsInDefault();
                                                          }
                                                      });
                                                      showMonthsInDefault();
                                                },
                                                error: function () { alert('error'); }
                                            });
                                      }
                                  });
                            },
                            error: function () { alert('error'); }
                        });

                    var transactionTypes = [
                        { ""Tr");
                WriteLiteral(@"ansactionTypeId"": ""D"", ""TransactionType"": ""Default"" },
                        { ""TransactionTypeId"": ""P"", ""TransactionType"": ""Payment"" }
                    ];

                    $(""#transactionType"").igCombo({
                        dataSource: transactionTypes,
                        textKey: ""TransactionType"",
                        valueKey: ""TransactionTypeId"",
                        selectionChanged: function (evt, ui) {
                            var val = $(""#transactionType"").igCombo(""value"");
                            var lblDiv = document.getElementById(""labelNP"");
                            var inputDiv = document.getElementById(""inputNP"");

                            if (val == ""P"") {
                                lblDiv.style.display = ""block"";
                                inputDiv.style.display = ""block"";
                            }
                            else {
                                lblDiv.style.display = ""none"";
                            ");
                WriteLiteral(@"    inputDiv.style.display = ""none"";
                            }
                        }
                    });
                  
                });
            
        }
        function getWorksheetDetailsError() {
        }

        function showMonthsInDefault(evt, ui) {
            var ug = $(""#unit"").igCombo(""value"");
            var og = $(""#owner"").igCombo(""value"");
            $.ajax(
                {
                    async: true,
                    type: 'GET',
                    url: '/Home/GetNumberOfMonthsInDefault',
                    data: { unitGuid: ug, ownerGuid: og },
                    cache: false,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: function (data) {
                        document.getElementById(""monthsInDefault"").value = 'hello';
                        document.getElementById(""labelCMD"").style = block;
                        document.getElement");
                WriteLiteral(@"ById(""inputCMD"").style = block;
                    }
                });

        }

        function showMonthsInDefault() {
            var ug = $(""#unit"").igCombo(""value"");
            var og = $(""#owner"").igCombo(""value"");
            $.ajax(
            {
                async: true,
                type: 'GET',
                url: '/Home/GetNumberOfMonthsInDefault',
                data: { unitGuid: ug, ownerGuid: og },
                cache: false,
                dataType: ""json"",
                contentType: ""application/json; charset=utf-8"",
                success: function (data) {
                    document.getElementById(""monthsInDefault"").value = data;
                    document.getElementById(""labelCMD"").style.display = ""block"";
                    document.getElementById(""inputCMD"").style.display = ""block"";
                }
            });
        }

        function deleteRow(trxId) {
            $.ajax(
                {
                    async: true,
");
                WriteLiteral(@"                    type: 'POST',
                    url: '/Home/DeleteWorksheetTransaction',
                    data: { trxId: trxId },
                    cache: false,
                    success: function (data) {
                        getWorksheetDetails();
                    }
                });

        }

        function submitWorksheet() {
            $.ajax(
                {
                    async: true,
                    type: 'POST',
                    url: '/Home/SubmitWorksheet',
                    data: { worksheetId: ");
                EndContext();
                BeginContext(25465, 17, false);
#line 559 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\AddEditWorksheet.cshtml"
                                    Write(Model.WorksheetId);

#line default
#line hidden
                EndContext();
                BeginContext(25482, 2106, true);
                WriteLiteral(@" },
                    cache: false,
                    success: function (data) {
                        printDeficiencyReport();
                        window.open('Home', '_self');
                    }
                });
        }

        function printDeficiencyReport() {
            if (bg !== null && bg !== '00000000-0000-0000-0000-000000000000') {
                var url = reportPath + 'rt=df&bg=' + bg + '&dt=' + idt;;
                window.open(url, '_blank');
            }
        }

    </script>
    <script id=""dialogTemplate"" type=""text/html"">
        <div style=""float: left; width: 100%"">
            <strong>${Name}</strong><br />
            <table style=""width: 100%;"">
                <colgroup>
                    <col style=""width: 30%;"" />
                    <col style=""width: 200%;"" />
                </colgroup>
                <tbody data-render-tmpl=""true""></tbody>
                <tr>
                    <td>Unit:</td>
                    <td><input ");
                WriteLiteral(@"id=""unit"" /></td>
                </tr>
                <tr>
                    <td>Owner:</td>
                    <td><input id=""owner"" /></td>
                </tr>
                <tr>
                    <td>Transaction Type:</td>
                    <td><input id=""transactionType"" /></td>

                </tr>
                <tr>
                    <td><div id=""labelNP"">Number Of Payments:</div></td>
                    <td><div id=""inputNP""><input id=""numberOfPayments"" /></div></td>
                </tr>
                <tr>
                    <td><div id=""labelCMD""><b>Months In Default:</b></div></td>
                    <td><div id=""inputCMD""><b><input id=""monthsInDefault"" readonly=""readonly""/></b></div></td>
                </tr>
            </table>
        </div>
    </script>

    <script id=""editorsTemplate"" type=""text/html"">
        <tr>
            <td style=""color: black;"">${headerText}</td>
            <td><input data-editor-for-${key}=""true"" style=""color: blac");
                WriteLiteral("k; width: 1000px;\" /></td>\r\n        </tr>\r\n    </script>\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(27595, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(27597, 3969, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "308f96ff9cf9a4b5d96125507f62843bf8fa9da837151", async() => {
                BeginContext(27603, 987, true);
                WriteLiteral(@"
    <style type=""text/css"">
        .deleteAlign {
            text-align: right !important;
        }
        .imagePad{
            padding-left: 5px;
        }
        .optionPad{
            padding-top: 20px;
        }
    </style>
    <table width=""100%"">
        <tr>
            <td align=""left"" valign=""top"">
                <table>
                    <tr>
                        <td>
                            <input id=""buildingName"" style=""color: black;"">
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input id=""invoiceDate"" style=""color: black;"">
                        </td>
                    </tr>
                    <tr>
                        <td valign=""bottom"" class=""optionPad"">
                            <table>
                                <tr>
                                    <td>
                                        ");
                EndContext();
                BeginContext(28590, 35, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "308f96ff9cf9a4b5d96125507f62843bf8fa9da838543", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(28625, 319, true);
                WriteLiteral(@"
                                    </td>
                                    <td class=""imagePad""><a onclick=""submitWorksheet()"">Submit Worksheet</a></td>
                                </tr>
                                <tr>
                                    <td>
                                        ");
                EndContext();
                BeginContext(28944, 34, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "308f96ff9cf9a4b5d96125507f62843bf8fa9da840110", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(28978, 2581, true);
                WriteLiteral(@"
                                    </td>
                                    <td class=""imagePad""><a onclick=""printDeficiencyReport()"">Print Deficiency Report</a></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    
                </table>
            </td>
            <td align=""right"" valign=""top"">
                <table width=""50%"">
                    <tr>
                        <td>
                            <b>Base Rent:</b>
                        </td>
                        <td align=""right"">
                            <input id=""baserent"" style=""color: black;"">
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Civic:</b>
                        </td>
                        <td align=""right"">
                            <input id=""civic"" style=""color: black;"">
              ");
                WriteLiteral(@"          </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Supplemental:</b>
                        </td>
                        <td align=""right"">
                            <input id=""supplemental"" style=""color: black;"">
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>PILOT:</b>
                        </td>
                        <td align=""right"">
                            <input id=""pilot"" style=""color: black;"">
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <b>Invoice Total:</b>
                        </td>
                        <td align=""right"">
                            <input id=""total"" style=""color: black;font-weight: bold;"">
                        </td>
                    </tr>
                </table>
        ");
                WriteLiteral(@"    </td>
        </tr>
        <tr>
            <td colspan=""2""><table id=""worksheetDetails""></table></td>
        </tr>
        <tr>
            <td colspan=""2"" align=""right"">
                <div id=""submitButton"">
                    <button id=""buttonSubmit"" type=""submit"" class=""btn btn-default"" onclick=""submitWorksheet()"">
                        <span class=""glyphicon glyphicon-book""></span>Submit Worksheet
                    </button>
                </div>
            </td>
        </tr>
    </table>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(31566, 9, true);
            WriteLiteral("\r\n</html>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<WorksheetModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
