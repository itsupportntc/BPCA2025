#pragma checksum "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d7a75d848272bba641d8a3e117ea615fc0b39c0c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Home), @"mvc.1.0.view", @"/Views/Home/Home.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Home.cshtml", typeof(AspNetCore.Views_Home_Home))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies;

#line default
#line hidden
#line 2 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\_ViewImports.cshtml"
using BPCACondoDeficiencies.Models;

#line default
#line hidden
#line 1 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
using Infragistics.Web.Mvc;

#line default
#line hidden
#line 2 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d7a75d848272bba641d8a3e117ea615fc0b39c0c", @"/Views/Home/Home.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b8fbd9faa897a3de153447734863bc8f11e1a8c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Home : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(64, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 4 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
  
    ViewData["Title"] = "Home";

#line default
#line hidden
            BeginContext(106, 27, true);
            WriteLiteral("<!DOCTYPE html>\r\n\r\n<html>\r\n");
            EndContext();
            BeginContext(133, 26384, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d7a75d848272bba641d8a3e117ea615fc0b39c0c3975", async() => {
                BeginContext(139, 26371, true);
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <title>Home</title>
    <style type=""text/css"">
        #OpenWorksheetGrid tr td {
            white-space: nowrap;
        }
        #gridSubmittedWorksheets tr td {
            white-space: nowrap;
        }
        th.ui-iggrid-header[id$=View] {
            text-align: center !important;
        }
        th.ui-iggrid-header[id$=Approve] {
            text-align: center !important;
        }
        th.ui-iggrid-header[id$=Reject] {
            text-align: center !important;
        }
    </style>

    <script>
        var agencyCode;
        var isAdminUser;

        $(document).ready
            (function () {
                checkSession();
                loadUserSettings();
            });

        function loadUserSettings() {
            $.ajax(
                {
                    async: true,
                    type: 'GET',
                    url: '/Home/GetUserAgencyCode',
                    c");
                WriteLiteral(@"ontentType: ""text/html"",
                    cache: false,
                    success: function (data) {
                        agencyCode = data;
                        
                        if (agencyCode.toString() === ""RED"" || agencyCode.toString() === ""AUTH"") {
                            getSubmittedWorksheets();
                            loadMessages(true);
                        }
                        else {
                            loadMessages(false);
                        }
                    },
                    error: function (jqXHR, exception) {
                        console.log(jqXHR);
                        console.log(exception);
                        return false;
                    }
                }
            );
        }

        function loadMessages(isAdmin) {
            $.ajax(
                {
                    async: true,
                    type: 'GET',
                    url: '/Home/GetBPCAMessages',
                  ");
                WriteLiteral(@"  cache: false,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: function (data) {
                        getMessageSuccessCallBack(data, isAdmin);
                    },
                    error: getMessageErrorCallBack()
                }
            );

        }

        function getMessageSuccessCallBack(data, isAdmin) {
            var currentDate = new Date().toLocaleString();
            if (isAdmin) {
                $(""#MessageGrid"").igGrid({

                    autoGenerateColumns: false,
                    renderCheckboxes: true,
                    primaryKey: ""MessageId"",
                    caption: ""BPCA Messages"",
                    columns:
                        [
                            { headerText: ""Message Id"", key: ""MessageId"", dataType: ""number"", width: ""0%"" },
                            { headerText: ""Date"", key: ""MessageDate"", dataType: ""date"", width: ""20%"" },
  ");
                WriteLiteral(@"                          { headerText: ""Message"", key: ""MessageText"", dataType: ""string"", width: ""60%"" },
                            { headerText: ""User"", key: ""User"", dataType: ""string"", width: ""20%"" },
                            { headerText: ""Expiration Date"", key: ""MessageExpiration"", dataType: ""date"", width: ""0%"" }
                        ],
                    dataSource: data,
                    dataSourceType: ""json"",
                    responseDataKey: ""results"",
                    height: ""500"",
                    width: ""498"",
                    tabIndex: 1,
                    features: [
                        {
                            name: ""Selection"",
                            mode: ""row"",
                            multipleSelection: false
                        },
                        {
                            name: ""Updating"",
                            locale: {
                                addRowLabel: ""Add new message...""
                  ");
                WriteLiteral(@"          },
                            enableAddRow: true,
                            enableUpdateRow: true,
                            enableDeleteRow: true,
                            startEditTriggers: ""click"",
                            editMode: ""dialog"",
                            columnSettings: [
                                {
                                    columnKey: ""MessageId"",
                                    editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: -1
                                },
                                {
                                    columnKey: ""MessageDate"",
                                    editorType: ""datepicker"",
                                    readOnly: true,
                                    defaultValue: currentDate
                                },
                                {
                                    columnKey: ""User"",
    ");
                WriteLiteral(@"                                editorType: ""text"",
                                    readOnly: true,
                                    defaultValue: document.getElementById(""currentUserName"").value
                                },
                                {
                                    columnKey: ""MessageText"",
                                    editorType: ""text"",
                                    readOnly: false,
                                    required: true,
                                    validation: true,
                                    editorOptions: {
                                        height: 100,
                                        width: 400,
                                        textMode: ""multiline""
                                    }
                                },
                                {
                                    columnKey: ""MessageExpiration"",
                                    editorType: ""datepicker"",");
                WriteLiteral(@"
                                    required: true,
                                    validation: true,
                                    defaultValue: currentDate
                                }
                            ],
                            rowEditDialogOptions: {
                                captionLabel: ""Add/Edit Messsage"",
                                width: 700,
                                height: 500,
                                dialogTemplateSelector: ""#dialogTemplate"",
                                editorsTemplateSelector: ""#editorsTemplate"",
                                containment: ""ui"",
                                animationDuration: 400
                            }
                        },
                        {
                            name: 'Hiding',
                            columnSettings:
                                [
                                    {
                                        columnKey: 'MessageId");
                WriteLiteral(@"',
                                        allowHiding: false,
                                        hidden: true
                                    },
                                    {
                                        columnKey: 'MessageText',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'MessageDate',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'User',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnK");
                WriteLiteral(@"ey: 'MessageExpiration',
                                        allowHiding: false,
                                        hidden: false
                                    }
                                ]
                        }
                    ]
                });
            }
            else {
                $(""#MessageGrid"").igGrid({
                      autoGenerateColumns: false,
                    renderCheckboxes: true,
                    primaryKey: ""MessageId"",
                    caption: ""BPCA Messages"",
                    columns:
                        [
                            { headerText: ""Message Id"", key: ""MessageId"", dataType: ""number"", width: ""0%"" },
                            { headerText: ""Date"", key: ""MessageDate"", dataType: ""date"", width: ""20%"" },
                            { headerText: ""Message"", key: ""MessageText"", dataType: ""string"", width: ""60%"" },
                            { headerText: ""User"", key: ""User"", dataType: ""string"", widt");
                WriteLiteral(@"h: ""20%"" },
                            { headerText: ""Expiration Date"", key: ""MessageExpiration"", dataType: ""date"", width: ""0%"" }
                        ],
                    dataSource: data,
                    dataSourceType: ""json"",
                    responseDataKey: ""results"",
                    height: ""500"",
                    width: ""498"",
                    tabIndex: 1,
                    features: [
                        {
                            name: ""Selection"",
                            mode: ""row"",
                            multipleSelection: false
                        },
                        {
                            name: 'Hiding',
                            columnSettings:
                                [
                                    {
                                        columnKey: 'MessageId',
                                        allowHiding: false,
                                        hidden: true
                      ");
                WriteLiteral(@"              },
                                    {
                                        columnKey: 'MessageText',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'MessageDate',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'User',
                                        allowHiding: false,
                                        hidden: false
                                    },
                                    {
                                        columnKey: 'MessageExpiration',
                                        allowHiding: false,
                                        hidden: false");
                WriteLiteral(@"
                                    }
                                ]
                        }
                    ]
                });
            }

            $(""#MessageGrid"").on(""iggridupdatingrowadded"", function (evt, ui) {
                if (ui.rowAdding == false) { return; }

                var mi = -1;
                var md = ui.values[""MessageDate""].toLocaleString().substring(0, 10).replace("","", """").trim();
                var mt = ui.values[""MessageText""];
                var me = ui.values[""MessageExpiration""].toLocaleString().substring(0, 10).replace("","", """").trim();
                $.ajax(
                    {
                        type: 'POST',
                        url: '/Home/SaveBPCAMessage',
                        data: { messageId: mi, messageDate: md, messageText: mt, messageExpiration: me },
                        dataType: ""json"",
                        success: function (response) {
                            loadUserSettings();
                 ");
                WriteLiteral(@"       },
                        error: function (jqXHR, exception) {
                            console.log(jqXHR);
                            console.log(exception);
                        }
                    });
            });
        $(""#MessageGrid"").on(""iggridupdatingeditrowending"", function (evt, ui) {
                if (ui.update == false) { return; }

                var mi = ui.values[""MessageId""];
                var md = ui.values[""MessageDate""].toLocaleString().substring(0, 10).replace("","", """").trim();
                var mt = ui.values[""MessageText""];
                var me = ui.values[""MessageExpiration""].toLocaleString().substring(0, 10).replace("","", """").trim();
                $.ajax(
                    {
                        type: 'POST',
                        url: '/Home/SaveBPCAMessage',
                        data: { messageId: mi, messageDate: md, messageText: mt, messageExpiration: me },
                        dataType: ""json"",
                       ");
                WriteLiteral(@" success: function (response) {
                            loadUserSettings();
                        },
                        error: function (jqXHR, exception) {
                            console.log(jqXHR);
                            console.log(exception);
                        }
                    });
            });
            setMessageGridProperties();
            getOpenWorksheets();
        }

        function getMessageErrorCallBack() {
            //alert('fail');
        }

        function setMessageGridProperties() {

        }

        function GetSessionVariable(key) {
            $.ajax(
                {
                    async: false,
                    type: 'GET',
                    url: '/Home/GetSessionVariable',
                    data: { variableName: key },
                    contentType: ""text/html"",
                    cache: false,
                    success: function (data) {
                        userGuid = data;
             ");
                WriteLiteral(@"           return data;
                    },
                    error: function (jqXHR, textStatus, error) {
                        console.log(error);
                    }
                }
            );

        }

        function getSessionVariableError(jqXHR, textStatus, error) {
            console.log(error);
        }

        function getOpenWorksheets() {
            $.ajax(
                {
                    type: 'GET',
                    url: '/Home/GetOpenWorksheets',
                    cache: false,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: getOpenWorksheetsSuccess,
                    error: function (jqXHR, exception) {
                        console.log(jqXHR);
                        console.log(exception);
                    }
                }
            );

        }

        function getOpenWorksheetsSuccess(data) {
            $(""#OpenWorksheetGrid");
                WriteLiteral(@""").igGrid({

                autoGenerateColumns: false,
                renderCheckboxes: true,
                primaryKey: ""InvoiceGuid"",
                caption: ""Open Worksheets"",
                virtualization: true,
                features: [
                    {
                        name: ""Sorting"",
                        type: ""local"",
                        mode: ""single"",
                        persist: false
                    },
                    {
                        name: 'Hiding',
                        columnSettings:
                            [
                                {
                                    columnKey: 'InvoiceGuid',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'WorksheetId',
                                    allowHiding: false,
                        ");
                WriteLiteral(@"            hidden: true
                                },
                                {
                                    columnKey: 'BuildingGuid',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'CreatedBy',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'Created',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'Action',
                                    allowHiding: false,
                                    hidden: false
                                },
       ");
                WriteLiteral(@"                         {
                                    columnKey: 'LastUpdatedBy',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'LastUpdated',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'Comments',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    columnKey: 'SiteId',
                                    allowHiding: false,
                                    hidden: true
                                },
                                {
                                    co");
                WriteLiteral(@"lumnKey: 'BuildingName',
                                    allowHiding: false,
                                    hidden: false
                                },
                                {
                                    columnKey: 'InvoiceDate',
                                    allowHiding: false,
                                    hidden: false
                                }
                            ]
                    }],
                columns:
                    [
                        { headerText: ""InvoiceGuid"", key: ""InvoiceGuid"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Invoice Date"", key: ""InvoiceDate"", dataType: ""date"", width: ""20%"" },
                        { headerText: ""WorksheetId"", key: ""WorksheetId"", dataType: ""number"", width: ""0%"" },
                        { headerText: ""BuildingGuid"", key: ""BuildingGuid"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Building"", key: ""BuildingName"",");
                WriteLiteral(@" dataType: ""string"", width: ""45%"" },
                        { headerText: ""Created By"", key: ""CreatedBy"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Date Created"", key: ""Created"", dataType: ""date"", width: ""0%"" },
                        { headerText: ""Updated By"", key: ""LastUpdatedBy"", dataType: ""string"", width: ""0%"" },
                        { headerText: ""Update Date"", key: ""LastUpdated"", dataType: ""date"", width: ""0%"" },
                        { headerText: ""Comments"", key: ""Comments"", dataType: ""string"", width: ""0%"" },
                        {
                            headerText: ""Action"", key: ""Action"", dataType: ""string"", width: ""20%"",
                            template: ""<a href='/Home/AddEditWorksheet?inv=${InvoiceGuid}'>${Action}</a>""
                        },
                        { headerText: ""SiteId"", key: ""SiteId"", dataType: ""string"", width: ""0%"" }
                    ],
                enableAddRow: false,
                enableUpdateRow: f");
                WriteLiteral(@"alse,
                enableDeleteRow: false,
                dataSource: data,
                dataSourceType: ""json"",
                responseDataKey: ""results"",
                height: ""500"",
                width: ""495"",
                tabIndex: 1,

            });
        }

        function getSubmittedWorksheets() {
            $.ajax(
                {
                    type: 'GET',
                    url: '/Home/GetSubmittedWorksheets',
                    cache: false,
                    dataType: ""json"",
                    contentType: ""application/json; charset=utf-8"",
                    success: function (data) {
                        $(""#gridSubmittedWorksheets"").igGrid({
                            autoGenerateColumns: false,
                            renderCheckboxes: true,
                            primaryKey: ""WorksheetId"",
                            caption: ""Submitted Worksheets"",
                            columns:
                                ");
                WriteLiteral(@"[
                                    { headerText: ""worksheetId"", key: ""WorksheetId"", dataType: ""string"", width: ""0%"" },
                                    { headerText: ""BuildingGuid"", key: ""BuildingGuid"", dataType: ""date"", width: ""0%"" },
                                    { headerText: ""InvoiceGUID"", key: ""InvoiceGUID"", dataType: ""string"", width: ""0%"" },
                                    { headerText: ""Building"", key: ""BuildingName"", dataType: ""string"", width: ""20%"" },
                                    { headerText: ""Agency"", key: ""AgencyName"", dataType: ""string"", width: ""20%"" },
                                    { headerText: ""Invoice Date"", key: ""InvoiceDate"", dataType: ""date"", width: ""12%"" },
                                    { headerText: ""Submission Date"", key: ""SubmissionDate"", dataType: ""date"", width: ""15%"" },
                                    {
                                        headerText: """", key: ""View"", dataType: ""string"", width: ""12%"", headerCssClass: ""headerCss"", col");
                WriteLiteral(@"umnCssClass: ""colCss"",
                                        template: ""<image src='/images/magnifier.png' style='margin: 0px 5px'/><a onclick='viewInvoice(\""${InvoiceGUID}\"", \""${BuildingGuid}\"", \""${InvoiceDate}\"")' href='#'>View</a>""
                                    },
                                    {
                                        headerText: """", key: ""Approve"", dataType: ""string"", width: ""12%"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"",
                                        template: ""<image src='/images/accept.png' style='margin: 0px 5px'/><a href='/Home/ApproveWorksheet?worksheetId=${WorksheetId}'>Approve</a>""
                                    },
                                    {
                                        headerText: """", key: ""Reject"", dataType: ""string"", width: ""12%"", headerCssClass: ""headerCss"", columnCssClass: ""colCss"",
                                        template: ""<image src='/images/delete.png' style='margin: 0px 5px'/><a href='/Ho");
                WriteLiteral(@"me/RejectWorksheet?worksheetId=${WorksheetId}'>Reject</a>""
                                    }
                                ],
                            enableAddRow: false,
                            enableUpdateRow: false,
                            enableDeleteRow: false,
                            dataSource: data,
                            dataSourceType: ""json"",
                            responseDataKey: ""results"",
                            height: ""500"",
                            width: ""1000"",
                            tabIndex: 1,

                        });
                    },
                    error: function (jqXHR, exception) {
                        console.log(jqXHR);
                        console.log(exception);
                    }
                }
            );

        }

        function viewInvoice(invoiceGuid, bg, idt) {
            //   show invoice
            //var url = reportPath + 'rt=i&ig=' + invoiceGuid;
            //win");
                WriteLiteral(@"dow.open(url, '_blank');

            //  show deficiency report
            var objDate = new Date(idt);
            idt = objDate.getMonth() + 1 + ""/1/"" + objDate.getFullYear();
            url = reportPath + 'rt=df&bg=' + bg + '&dt=' + idt;
            window.open(url, '_blank');
        }

        
        function approveWorksheet(worksheetId) {
            $.ajax(
                {
                    type: 'POST',
                    async: true,
                    url: '/Home/ApproveWorksheet',
                    data: { worksheetId: worksheetId },
                    dataType: ""json"",
                    success: function () {
                        //var bg = $(""#comboBuildings"").igCombo(""value"");
                        //loadBuildingSelection(bg);
                        location.reload();
                    },
                    error: function (jqXHR, exception) {
                        console.log(jqXHR);
                        console.log(exception);
          ");
                WriteLiteral(@"          }
                });
        }
    </script>

    <script id=""dialogTemplate"" type=""text/html"">
        <div style=""float: left; width: 100%"">
            <strong>${Name}</strong><br />
            <table style=""width: 700px;"">
                <colgroup>
                    <col style=""width: 30%;"" />
                    <col style=""width: 200%;"" />
                </colgroup>
                <tbody data-render-tmpl=""true""></tbody>
            </table>
        </div>
    </script>

    <script id=""editorsTemplate"" type=""text/html"">
        <tr>
            <td style=""color: black;"">${headerText}</td>
            <td><input data-editor-for-${key}=""true"" style=""color: black; width: 1000px;"" /></td>
        </tr>
    </script>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(26517, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(26519, 1239, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d7a75d848272bba641d8a3e117ea615fc0b39c0c32925", async() => {
                BeginContext(26525, 98, true);
                WriteLiteral("\r\n\r\n    <table width=\"1024\" border=\"0\">\r\n        <tr>\r\n            <td colspan=\"2\" width=\"1000\">\r\n");
                EndContext();
#line 598 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
                  
                    byte[] byteVal;

                    bool x = Context.Session.TryGetValue("UserDisplayName", out byteVal);
                    

#line default
#line hidden
#line 602 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
                     if (x)
                    {
                        string userDisplayName = System.Text.Encoding.ASCII.GetString(byteVal);

#line default
#line hidden
                BeginContext(26922, 87, true);
                WriteLiteral("                        <div style=\"font-family: Tahoma;font-size: larger\"><b> Welcome ");
                EndContext();
                BeginContext(27010, 15, false);
#line 605 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
                                                                                  Write(userDisplayName);

#line default
#line hidden
                EndContext();
                BeginContext(27025, 78, true);
                WriteLiteral(" </b></div>\r\n                        <input id=\"currentUserName\" type=\"hidden\"");
                EndContext();
                BeginWriteAttribute("value", " value=\'", 27103, "\'", 27127, 1);
#line 606 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
WriteAttributeValue("", 27111, userDisplayName, 27111, 16, false);

#line default
#line hidden
                EndWriteAttribute();
                BeginContext(27128, 5, true);
                WriteLiteral(" />\r\n");
                EndContext();
#line 607 "D:\Battery\Trial\Battery\BPCACondoDeficiencies\BPCACondoDeficiencies\Views\Home\Home.cshtml"
                    }

#line default
#line hidden
                BeginContext(27175, 576, true);
                WriteLiteral(@"            </td>
        </tr>
        <tr>
            <td colspan=""1"" width=""500"">
                <table id=""MessageGrid""></table>
            <td>
            <td colspan=""1"" width=""500"" align=""right"">
                <table id=""OpenWorksheetGrid""></table>
            </td>
        </tr>
        <tr>
            <td colspan=""3"" style=""padding-top: 3px"">
                <div id=""submittedWorksheets"" width=""100%"">
                    <table id=""gridSubmittedWorksheets""></table>
                </div>
            </td>
        </tr>
    </table>


");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(27758, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
